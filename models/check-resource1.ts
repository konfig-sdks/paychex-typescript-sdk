/*
External API



# Developer Resources
 Refer
[Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { PayComponentResource1 } from './pay-component-resource1';

/**
 * Check resource
 * @export
 * @interface CheckResource1
 */
export interface CheckResource1 {
    /**
     * The id assigned to the worker
     * @type {string}
     * @memberof CheckResource1
     */
    'workerId'?: string;
    /**
     * The id of a single check that a workers has.
     * @type {string}
     * @memberof CheckResource1
     */
    'paycheckId'?: string;
    /**
     * The id for the unprocessed payperiod.
     * @type {string}
     * @memberof CheckResource1
     */
    'payPeriodId'?: string;
    /**
     * Id that you define which is used for error handling/responses. This is not required when sending a single check.
     * @type {string}
     * @memberof CheckResource1
     */
    'checkCorrelationId'?: string;
    /**
     * This is used optionally for blocking the auto distribution of the earnings on the workers if they are setup for auto distribution.
     * @type {boolean}
     * @memberof CheckResource1
     */
    'blockAutoDistribution'?: CheckResource1BlockAutoDistributionEnum;
    /**
     * The earnings to apply to the check.Each earning needs to define as one of the following:1 .payHours: Will use the default hourly rate defined on the worker to apply the hours against. 2. payHours and payRate: Will allow you to define the monetary rate that the hours will be applied against. 3. payHours and payRateId: Will allow you to define which workers predefined pay rate the hours will be applied against. 4. payUnits: Will use the default hourly rate defined on the worker to apply the units against. 5. payUnits and payRate: Will allow you to define the monetary rate that the units will be applied against. 6. payUnits and payRateId: Will allow you to define which workers predefined pay rate the units will be applied against. 7. payAmount: Will allow you to define straight monetary amount.
     * @type {Array<PayComponentResource1>}
     * @memberof CheckResource1
     */
    'earnings'?: Array<PayComponentResource1>;
    /**
     * Deduction pay components on the check.
     * @type {Array<PayComponentResource1>}
     * @memberof CheckResource1
     */
    'deductions'?: Array<PayComponentResource1>;
    /**
     * Informational pay components on the check.
     * @type {Array<PayComponentResource1>}
     * @memberof CheckResource1
     */
    'informational'?: Array<PayComponentResource1>;
    /**
     * Tax pay components on the check.
     * @type {Array<PayComponentResource1>}
     * @memberof CheckResource1
     */
    'taxes'?: Array<PayComponentResource1>;
}

type CheckResource1BlockAutoDistributionEnum = true | false


