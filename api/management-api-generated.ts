/* tslint:disable */
/* eslint-disable */
/*
External API



# Developer Resources
 Refer
[Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeepUrlResponseResource } from '../models';
// @ts-ignore
import { ErrorResource } from '../models';
// @ts-ignore
import { PartnerLinkRequestResource } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ManagementApi - axios parameter creator
 * @export
 */
export const ManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * (For partnerships only) Link Paychex clients to a 3rd party partner application
         * @summary Request Client Access
         * @param {PartnerLinkRequestResource} partnerLinkRequestResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkPaychexClients: async (partnerLinkRequestResource: PartnerLinkRequestResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partnerLinkRequestResource' is not null or undefined
            assertParamExists('linkPaychexClients', 'partnerLinkRequestResource', partnerLinkRequestResource)
            const localVarPath = `/management/requestclientaccess`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: partnerLinkRequestResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/management/requestclientaccess',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(partnerLinkRequestResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManagementApi - functional programming interface
 * @export
 */
export const ManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * (For partnerships only) Link Paychex clients to a 3rd party partner application
         * @summary Request Client Access
         * @param {ManagementApiLinkPaychexClientsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkPaychexClients(requestParameters: ManagementApiLinkPaychexClientsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeepUrlResponseResource>> {
            const partnerLinkRequestResource: PartnerLinkRequestResource = {
                displayId: requestParameters.displayId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkPaychexClients(partnerLinkRequestResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ManagementApi - factory interface
 * @export
 */
export const ManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ManagementApiFp(configuration)
    return {
        /**
         * (For partnerships only) Link Paychex clients to a 3rd party partner application
         * @summary Request Client Access
         * @param {ManagementApiLinkPaychexClientsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkPaychexClients(requestParameters: ManagementApiLinkPaychexClientsRequest, options?: AxiosRequestConfig): AxiosPromise<DeepUrlResponseResource> {
            return localVarFp.linkPaychexClients(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for linkPaychexClients operation in ManagementApi.
 * @export
 * @interface ManagementApiLinkPaychexClientsRequest
 */
export type ManagementApiLinkPaychexClientsRequest = {
    
} & PartnerLinkRequestResource

/**
 * ManagementApiGenerated - object-oriented interface
 * @export
 * @class ManagementApiGenerated
 * @extends {BaseAPI}
 */
export class ManagementApiGenerated extends BaseAPI {
    /**
     * (For partnerships only) Link Paychex clients to a 3rd party partner application
     * @summary Request Client Access
     * @param {ManagementApiLinkPaychexClientsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagementApiGenerated
     */
    public linkPaychexClients(requestParameters: ManagementApiLinkPaychexClientsRequest, options?: AxiosRequestConfig) {
        return ManagementApiFp(this.configuration).linkPaychexClients(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
