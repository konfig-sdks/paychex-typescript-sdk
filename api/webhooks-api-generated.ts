/* tslint:disable */
/* eslint-disable */
/*
External API



# Developer Resources
 Refer
[Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Authentication1 } from '../models';
// @ts-ignore
import { ErrorResource } from '../models';
// @ts-ignore
import { Link } from '../models';
// @ts-ignore
import { WebhookRequest } from '../models';
// @ts-ignore
import { WebhookResponse } from '../models';
// @ts-ignore
import { WebhooksGetSpecificHookByIdResponse } from '../models';
// @ts-ignore
import { WebhooksListResponseInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <h3>Add a webhook for the calling application.</h3><p>When registering a webhook, you will need to provide your own URI in the request body (see our <a href=\'https://developer.paychex.com/resources/webhooks\'>full webhook documention here</a> on how to configure your URI). The newly registered webhook will send notifications to this endpoint as JSON payloads which vary by domain. Please configure your endpoint to accept the relevant payloads. To see an example payload for each domain, please refer to the \"Callbacks\" tab.</p>
         * @summary Add Webhook
         * @param {WebhookRequest} webhookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWebhook: async (webhookRequest: WebhookRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookRequest' is not null or undefined
            assertParamExists('addWebhook', 'webhookRequest', webhookRequest)
            const localVarPath = `/management/hooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhookRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/management/hooks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhookRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific hook for the calling application by id
         * @summary Delete Webhook
         * @param {string} hookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (hookId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hookId' is not null or undefined
            assertParamExists('deleteById', 'hookId', hookId)
            const localVarPath = `/management/hooks/{hookId}`
                .replace(`{${"hookId"}}`, encodeURIComponent(String(hookId !== undefined ? hookId : `-hookId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/management/hooks/{hookId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Will return a list of available domains depending on application type.
         * @summary Get Webhook domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableDomains: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/management/domains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/management/domains',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific hook for the calling application by id
         * @summary Webhook
         * @param {string} hookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificHookById: async (hookId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hookId' is not null or undefined
            assertParamExists('getSpecificHookById', 'hookId', hookId)
            const localVarPath = `/management/hooks/{hookId}`
                .replace(`{${"hookId"}}`, encodeURIComponent(String(hookId !== undefined ? hookId : `-hookId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/management/hooks/{hookId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all the webhooks setup for the calling application
         * @summary List Webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/management/hooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/management/hooks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * <h3>Add a webhook for the calling application.</h3><p>When registering a webhook, you will need to provide your own URI in the request body (see our <a href=\'https://developer.paychex.com/resources/webhooks\'>full webhook documention here</a> on how to configure your URI). The newly registered webhook will send notifications to this endpoint as JSON payloads which vary by domain. Please configure your endpoint to accept the relevant payloads. To see an example payload for each domain, please refer to the \"Callbacks\" tab.</p>
         * @summary Add Webhook
         * @param {WebhooksApiAddWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addWebhook(requestParameters: WebhooksApiAddWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookResponse>> {
            const webhookRequest: WebhookRequest = {
                hookId: requestParameters.hookId,
                uri: requestParameters.uri,
                companyId: requestParameters.companyId,
                authentication: requestParameters.authentication,
                domains: requestParameters.domains,
                links: requestParameters.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addWebhook(webhookRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a specific hook for the calling application by id
         * @summary Delete Webhook
         * @param {WebhooksApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: WebhooksApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.hookId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Will return a list of available domains depending on application type.
         * @summary Get Webhook domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableDomains(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableDomains(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a specific hook for the calling application by id
         * @summary Webhook
         * @param {WebhooksApiGetSpecificHookByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificHookById(requestParameters: WebhooksApiGetSpecificHookByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhooksGetSpecificHookByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificHookById(requestParameters.hookId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all the webhooks setup for the calling application
         * @summary List Webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WebhooksListResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhooksApiFp(configuration)
    return {
        /**
         * <h3>Add a webhook for the calling application.</h3><p>When registering a webhook, you will need to provide your own URI in the request body (see our <a href=\'https://developer.paychex.com/resources/webhooks\'>full webhook documention here</a> on how to configure your URI). The newly registered webhook will send notifications to this endpoint as JSON payloads which vary by domain. Please configure your endpoint to accept the relevant payloads. To see an example payload for each domain, please refer to the \"Callbacks\" tab.</p>
         * @summary Add Webhook
         * @param {WebhooksApiAddWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWebhook(requestParameters: WebhooksApiAddWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookResponse> {
            return localVarFp.addWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific hook for the calling application by id
         * @summary Delete Webhook
         * @param {WebhooksApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: WebhooksApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Will return a list of available domains depending on application type.
         * @summary Get Webhook domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableDomains(options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getAvailableDomains(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific hook for the calling application by id
         * @summary Webhook
         * @param {WebhooksApiGetSpecificHookByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificHookById(requestParameters: WebhooksApiGetSpecificHookByIdRequest, options?: AxiosRequestConfig): AxiosPromise<WebhooksGetSpecificHookByIdResponse> {
            return localVarFp.getSpecificHookById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all the webhooks setup for the calling application
         * @summary List Webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: AxiosRequestConfig): AxiosPromise<Array<WebhooksListResponseInner>> {
            return localVarFp.list(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addWebhook operation in WebhooksApi.
 * @export
 * @interface WebhooksApiAddWebhookRequest
 */
export type WebhooksApiAddWebhookRequest = {
    
} & WebhookRequest

/**
 * Request parameters for deleteById operation in WebhooksApi.
 * @export
 * @interface WebhooksApiDeleteByIdRequest
 */
export type WebhooksApiDeleteByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof WebhooksApiDeleteById
    */
    readonly hookId: string
    
}

/**
 * Request parameters for getSpecificHookById operation in WebhooksApi.
 * @export
 * @interface WebhooksApiGetSpecificHookByIdRequest
 */
export type WebhooksApiGetSpecificHookByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof WebhooksApiGetSpecificHookById
    */
    readonly hookId: string
    
}

/**
 * WebhooksApiGenerated - object-oriented interface
 * @export
 * @class WebhooksApiGenerated
 * @extends {BaseAPI}
 */
export class WebhooksApiGenerated extends BaseAPI {
    /**
     * <h3>Add a webhook for the calling application.</h3><p>When registering a webhook, you will need to provide your own URI in the request body (see our <a href=\'https://developer.paychex.com/resources/webhooks\'>full webhook documention here</a> on how to configure your URI). The newly registered webhook will send notifications to this endpoint as JSON payloads which vary by domain. Please configure your endpoint to accept the relevant payloads. To see an example payload for each domain, please refer to the \"Callbacks\" tab.</p>
     * @summary Add Webhook
     * @param {WebhooksApiAddWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public addWebhook(requestParameters: WebhooksApiAddWebhookRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).addWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific hook for the calling application by id
     * @summary Delete Webhook
     * @param {WebhooksApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public deleteById(requestParameters: WebhooksApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Will return a list of available domains depending on application type.
     * @summary Get Webhook domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public getAvailableDomains(options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).getAvailableDomains(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific hook for the calling application by id
     * @summary Webhook
     * @param {WebhooksApiGetSpecificHookByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public getSpecificHookById(requestParameters: WebhooksApiGetSpecificHookByIdRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).getSpecificHookById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all the webhooks setup for the calling application
     * @summary List Webhooks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public list(options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).list(options).then((request) => request(this.axios, this.basePath));
    }
}
