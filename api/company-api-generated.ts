/* tslint:disable */
/* eslint-disable */
/*
External API



# Developer Resources
 Refer
[Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CalculationBase } from '../models';
// @ts-ignore
import { CommunicationResource } from '../models';
// @ts-ignore
import { CompanyResource } from '../models';
// @ts-ignore
import { ContactTypeResource } from '../models';
// @ts-ignore
import { CustomFieldsCategoryResource } from '../models';
// @ts-ignore
import { CustomFieldsDropdownResource } from '../models';
// @ts-ignore
import { CustomFieldsResource } from '../models';
// @ts-ignore
import { ErrorResource } from '../models';
// @ts-ignore
import { FrequencyCombinationUnitResource } from '../models';
// @ts-ignore
import { JobResource } from '../models';
// @ts-ignore
import { JobSegmentsConfigResource } from '../models';
// @ts-ignore
import { JobSegmentsResource } from '../models';
// @ts-ignore
import { JobTitleResource } from '../models';
// @ts-ignore
import { LaborAssignmentResource } from '../models';
// @ts-ignore
import { LegalIdResource } from '../models';
// @ts-ignore
import { Link } from '../models';
// @ts-ignore
import { LocationResource } from '../models';
// @ts-ignore
import { NameResource } from '../models';
// @ts-ignore
import { OrganizationResource } from '../models';
// @ts-ignore
import { Status } from '../models';
// @ts-ignore
import { SupervisorResource } from '../models';
// @ts-ignore
import { WorkerResource } from '../models';
// @ts-ignore
import { WorkerStatus } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CompanyApi - axios parameter creator
 * @export
 */
export const CompanyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add one or more workers to a specific company that your application has been granted access to. These workers will be added with an IN_PROGRESS status assigned to them.  In_Progress workers will pre-populated within Paychex Flex and will require someone to complete them to be fully available with the Flex platform.  Paychex Flex UI will hold a majority of validation, rules, and enforced required fields based on the clients configuration.  Required fields are givenName, familyName, & workerType (when adding multiple workers at a time you will need to also include a \"workerCorrelationId\" data element on each worker, that will be used as an identifier in our responses). Optionally you can include a workers communications object within the worker.  Once generated the IN_PROGRESS worker can have their communications, Compensation and Federal Taxes POSTed and PATCHed using the generated workerId.
         * @summary In Progress Workers
         * @param {string} companyId The id assigned to the company that workers are being requested for.
         * @param {WorkerResource} workerResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInProgressWorkers: async (companyId: string, workerResource: WorkerResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('addInProgressWorkers', 'companyId', companyId)
            // verify required parameter 'workerResource' is not null or undefined
            assertParamExists('addInProgressWorkers', 'workerResource', workerResource)
            const localVarPath = `/companies/{companyId}/workers`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.paychex.workers.v1+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workerResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/workers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workerResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a company level job. If a client has their job numbering structured in 2-3 separate \'segments\', you may need to first do a GET on the jobsegements endpoint, so you can see how many segments and the character length of each segment, as well as the name of those segments, which you will need to have before you POST.
         * @summary Company Job
         * @param {string} companyId The ID of the company.
         * @param {JobResource} jobResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addJob: async (companyId: string, jobResource: JobResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('addJob', 'companyId', companyId)
            // verify required parameter 'jobResource' is not null or undefined
            assertParamExists('addJob', 'jobResource', jobResource)
            const localVarPath = `/companies/{companyId}/jobs`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.paychex.company.jobs.v1+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: jobResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/jobs',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(jobResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create CustomFields at the company level which a company could be assigned.
         * @summary Custom Field
         * @param {string} companyId ID associated with desired company.
         * @param {CustomFieldsResource} customFieldsResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomFieldAtCompanyLevel: async (companyId: string, customFieldsResource: CustomFieldsResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createCustomFieldAtCompanyLevel', 'companyId', companyId)
            // verify required parameter 'customFieldsResource' is not null or undefined
            assertParamExists('createCustomFieldAtCompanyLevel', 'customFieldsResource', customFieldsResource)
            const localVarPath = `/companies/{companyId}/customfields`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customFieldsResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/customfields',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customFieldsResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create CustomFieldsCategory at the company level which a company could be assigned.
         * @summary Custom Fields Category
         * @param {string} companyId ID associated with desired company.
         * @param {CustomFieldsCategoryResource} customFieldsCategoryResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomFieldCategory: async (companyId: string, customFieldsCategoryResource: CustomFieldsCategoryResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('createCustomFieldCategory', 'companyId', companyId)
            // verify required parameter 'customFieldsCategoryResource' is not null or undefined
            assertParamExists('createCustomFieldCategory', 'customFieldsCategoryResource', customFieldsCategoryResource)
            const localVarPath = `/companies/{companyId}/customfieldscategories`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customFieldsCategoryResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/customfieldscategories',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customFieldsCategoryResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete CustomField at the company level.
         * @summary Custom Field
         * @param {string} companyId ID associated with desired company.
         * @param {string} customfieldid ID associated with desired custom field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomField: async (companyId: string, customfieldid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteCustomField', 'companyId', companyId)
            // verify required parameter 'customfieldid' is not null or undefined
            assertParamExists('deleteCustomField', 'customfieldid', customfieldid)
            const localVarPath = `/companies/{companyId}/customfields/{customfieldid}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"customfieldid"}}`, encodeURIComponent(String(customfieldid !== undefined ? customfieldid : `-customfieldid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/customfields/{customfieldid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete CustomFieldsCategory at the company level.
         * @summary Custom Fields Category
         * @param {string} companyId ID associated with desired company.
         * @param {string} categoryid ID associated with desired category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomFieldsCategory: async (companyId: string, categoryid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('deleteCustomFieldsCategory', 'companyId', companyId)
            // verify required parameter 'categoryid' is not null or undefined
            assertParamExists('deleteCustomFieldsCategory', 'categoryid', categoryid)
            const localVarPath = `/companies/{companyId}/customfieldscategories/{categoryid}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"categoryid"}}`, encodeURIComponent(String(categoryid !== undefined ? categoryid : `-categoryid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/customfieldscategories/{categoryid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Array of calculation bases that are used with a worker pay components that are not FLAT_DOLLAR_AMOUNT allow you to determine what to apply the calculation against when determining the amount during the pay run.
         * @summary Company Calculation Bases
         * @param {string} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCalculationBases: async (companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCalculationBases', 'companyId', companyId)
            const localVarPath = `/companies/{companyId}/calculationbases`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/calculationbases',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Information about contact types that your application has been granted access to.
         * @summary Company Contact Types
         * @param {string} companyId ID associated with desired company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactTypes: async (companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getContactTypes', 'companyId', companyId)
            const localVarPath = `/companies/{companyId}/contacttypes`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/contacttypes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Information about a single CustomField.
         * @summary Custom Field
         * @param {string} companyId ID associated with desired company.
         * @param {string} customFieldId ID associated with desired custom field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomField: async (companyId: string, customFieldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCustomField', 'companyId', companyId)
            // verify required parameter 'customFieldId' is not null or undefined
            assertParamExists('getCustomField', 'customFieldId', customFieldId)
            const localVarPath = `/companies/{companyId}/customfields/{customFieldId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"customFieldId"}}`, encodeURIComponent(String(customFieldId !== undefined ? customFieldId : `-customFieldId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/customfields/{customFieldId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Array of CustomFieldsCategories Configured at the company level 
         * @summary Custom Fields Categories
         * @param {string} companyId ID associated with desired company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFieldCategories: async (companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCustomFieldCategories', 'companyId', companyId)
            const localVarPath = `/companies/{companyId}/customfieldscategories`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/customfieldscategories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Array of customFields Configured at the company level 
         * @summary Custom Fields
         * @param {string} companyId ID associated with desired company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFields: async (companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCustomFields', 'companyId', companyId)
            const localVarPath = `/companies/{companyId}/customfields`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/customfields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Information about a single CustomFieldsCategory.
         * @summary Custom Fields Category
         * @param {string} companyId ID associated with desired company.
         * @param {string} categoryId ID associated with desired category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFieldsCategory: async (companyId: string, categoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCustomFieldsCategory', 'companyId', companyId)
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getCustomFieldsCategory', 'categoryId', categoryId)
            const localVarPath = `/companies/{companyId}/customfieldscategories/{categoryId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"categoryId"}}`, encodeURIComponent(String(categoryId !== undefined ? categoryId : `-categoryId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/customfieldscategories/{categoryId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Information about a single company that your application has access to.
         * @summary A Company
         * @param {string} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation: async (companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getInformation', 'companyId', companyId)
            const localVarPath = `/companies/{companyId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Information about a single Job.
         * @summary Company Job
         * @param {string} companyId The ID of the company.
         * @param {string} jobId The ID of the job.
         * @param {string} [asof] Returns job as of the date used in the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobInformation: async (companyId: string, jobId: string, asof?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getJobInformation', 'companyId', companyId)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getJobInformation', 'jobId', jobId)
            const localVarPath = `/companies/{companyId}/jobs/{jobId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId !== undefined ? jobId : `-jobId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (asof !== undefined) {
                localVarQueryParameter['asof'] = asof;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/jobs/{jobId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve job segment structure setup for this client. This endpoint is only available if the client has their job numbering set up in \'2-3 separate \'segments\'.  The response will give you back the exact character lengths and the segment names so you are able to POST.
         * @summary Company Job Segments
         * @param {string} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobSegmentStructureSetup: async (companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getJobSegmentStructureSetup', 'companyId', companyId)
            const localVarPath = `/companies/{companyId}/jobsegments`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/jobsegments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Information about a single Job Title.
         * @summary Job Title
         * @param {string} companyId The ID of the company.
         * @param {string} workerJobTitleId The ID of the worker job title.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobTitle: async (companyId: string, workerJobTitleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getJobTitle', 'companyId', companyId)
            // verify required parameter 'workerJobTitleId' is not null or undefined
            assertParamExists('getJobTitle', 'workerJobTitleId', workerJobTitleId)
            const localVarPath = `/companies/{companyId}/jobtitles/{jobTitleId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"workerJobTitleId"}}`, encodeURIComponent(String(workerJobTitleId !== undefined ? workerJobTitleId : `-workerJobTitleId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/jobtitles/{jobTitleId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Array of jobs set at the company level.
         * @summary Company Jobs
         * @param {string} companyId The ID of the company.
         * @param {string} [asof] Returns all jobs as of the date used in the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobs: async (companyId: string, asof?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getJobs', 'companyId', companyId)
            const localVarPath = `/companies/{companyId}/jobs`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (asof !== undefined) {
                localVarQueryParameter['asof'] = asof;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/jobs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Information about a single Labor Assignment.
         * @summary Company Labour Assignment
         * @param {string} companyId The ID of the company.
         * @param {string} laborAssignmentId The ID of the labor assignment.
         * @param {string} [asof] Returns labour assignment as of the date used in the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLaborAssignment: async (companyId: string, laborAssignmentId: string, asof?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getLaborAssignment', 'companyId', companyId)
            // verify required parameter 'laborAssignmentId' is not null or undefined
            assertParamExists('getLaborAssignment', 'laborAssignmentId', laborAssignmentId)
            const localVarPath = `/companies/{companyId}/laborassignments/{laborAssignmentId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"laborAssignmentId"}}`, encodeURIComponent(String(laborAssignmentId !== undefined ? laborAssignmentId : `-laborAssignmentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (asof !== undefined) {
                localVarQueryParameter['asof'] = asof;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/laborassignments/{laborAssignmentId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Information about a single Location.
         * @summary Company Location
         * @param {string} companyId ID associated with desired company.
         * @param {string} locationId The ID of the location.
         * @param {string} [asof] Returns location as of the date used in the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocation: async (companyId: string, locationId: string, asof?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getLocation', 'companyId', companyId)
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('getLocation', 'locationId', locationId)
            const localVarPath = `/companies/{companyId}/locations/{locationId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"locationId"}}`, encodeURIComponent(String(locationId !== undefined ? locationId : `-locationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (asof !== undefined) {
                localVarQueryParameter['asof'] = asof;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/locations/{locationId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Array of locations set at the company level.
         * @summary Company Locations
         * @param {string} companyId The ID of the company.
         * @param {string} [asof] Returns all locations as of the date used in the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocations: async (companyId: string, asof?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getLocations', 'companyId', companyId)
            const localVarPath = `/companies/{companyId}/locations`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (asof !== undefined) {
                localVarQueryParameter['asof'] = asof;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/locations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Information about a single Organization.
         * @summary Company Organization
         * @param {string} companyId The ID of the company.
         * @param {string} organizationId The ID of the organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: async (companyId: string, organizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getOrganization', 'companyId', companyId)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getOrganization', 'organizationId', organizationId)
            const localVarPath = `/companies/{companyId}/organizations/{orgId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId !== undefined ? organizationId : `-organizationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/organizations/{orgId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Array of organizations set at the company level.
         * @summary Company Organizations
         * @param {string} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizations: async (companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getOrganizations', 'companyId', companyId)
            const localVarPath = `/companies/{companyId}/organizations`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/organizations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Array of pay frequencies that workers maybe paid on. This is a generic array that is currently not specific to the companies pay frequency. This is to be used with the workers pay components to determine what the frequency, occurrence, and intervals are allowed.
         * @summary Company Pay Frequencies
         * @param {string} companyId The ID of the company.
         * @param {string} [payfrequency] The frequency that you would like to search for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayFrequencies: async (companyId: string, payfrequency?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPayFrequencies', 'companyId', companyId)
            const localVarPath = `/companies/{companyId}/payfrequencies`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (payfrequency !== undefined) {
                localVarQueryParameter['payfrequency'] = payfrequency;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/payfrequencies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Information about a single status.
         * @summary Company Worker Status
         * @param {string} companyId The ID of the company.
         * @param {string} workerStatusId The ID of the worker status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: async (companyId: string, workerStatusId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getStatus', 'companyId', companyId)
            // verify required parameter 'workerStatusId' is not null or undefined
            assertParamExists('getStatus', 'workerStatusId', workerStatusId)
            const localVarPath = `/companies/{companyId}/workerstatuses/{statusId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"workerStatusId"}}`, encodeURIComponent(String(workerStatusId !== undefined ? workerStatusId : `-workerStatusId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/workerstatuses/{statusId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Array of workers (employee and contractor) for all of the companies who are associated with a specific company that your application has been granted access to. The combination of query parameters to be used with this endpoint are as follows:  1. givenname, familyname, legallastfour  2. from, to (start date, end date)  3. employeeid  4. locationid  5. offset, limit (paging).  Note: Paging and filtering attributes cannot be applied together. 
         * @summary Company Workers
         * @param {string} companyId The id assigned to the company that workers are being requested for.
         * @param {string} [givenname] The given or first name of the workers to search for.
         * @param {string} [familyname] The family or last name of the workers to search for.
         * @param {string} [legallastfour] The last 4 digits of the workers federal level taxpayer id number of the worker to search for.
         * @param {string} [employeeid] The assigned workers employee ID.
         * @param {string} [from] The beginning of the search date range using for when the worker was created.
         * @param {string} [to] The ending of the search date range using for then the worker was created.
         * @param {string} [locationid] The location Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkers: async (companyId: string, givenname?: string, familyname?: string, legallastfour?: string, employeeid?: string, from?: string, to?: string, locationid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getWorkers', 'companyId', companyId)
            const localVarPath = `/companies/{companyId}/workers`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (givenname !== undefined) {
                localVarQueryParameter['givenname'] = givenname;
            }

            if (familyname !== undefined) {
                localVarQueryParameter['familyname'] = familyname;
            }

            if (legallastfour !== undefined) {
                localVarQueryParameter['legallastfour'] = legallastfour;
            }

            if (employeeid !== undefined) {
                localVarQueryParameter['employeeid'] = employeeid;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (locationid !== undefined) {
                localVarQueryParameter['locationid'] = locationid;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/workers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Array of companies that your application has been granted with some level of access. Your Application (API Key) can be granted access to one or more companies (clients) accounts that are associated with one or more product lines within Paychex.
         * @summary Companies
         * @param {string} [displayid] The client account number used for identification purposes. (no dash or spaces allowed, only the last 8 characters  of the ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (displayid?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (displayid !== undefined) {
                localVarQueryParameter['displayid'] = displayid;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Array of job titles set at the company level which a worker could be assigned.
         * @summary Company Job Titles
         * @param {string} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobTitles: async (companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listJobTitles', 'companyId', companyId)
            const localVarPath = `/companies/{companyId}/jobtitles`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/jobtitles',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Array of labor assignments set at the company level.
         * @summary Company Labour Assignments
         * @param {string} companyId The ID of the company.
         * @param {string} [asof] Returns all labour assignments as of the date used in the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLaborAssignments: async (companyId: string, asof?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listLaborAssignments', 'companyId', companyId)
            const localVarPath = `/companies/{companyId}/laborassignments`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (asof !== undefined) {
                localVarQueryParameter['asof'] = asof;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/laborassignments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Array of statuses set at the company level which a worker could be assigned.
         * @summary Company Worker Statuses
         * @param {string} companyId The ID of the company.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkerStatuses: async (companyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listWorkerStatuses', 'companyId', companyId)
            const localVarPath = `/companies/{companyId}/workerstatuses`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/workerstatuses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update CustomFields at the company level which a company could be assigned.
         * @summary Custom Field
         * @param {string} companyId ID associated with desired company.
         * @param {string} customfieldid ID associated with desired custom field.
         * @param {CustomFieldsResource} customFieldsResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomField: async (companyId: string, customfieldid: string, customFieldsResource: CustomFieldsResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateCustomField', 'companyId', companyId)
            // verify required parameter 'customfieldid' is not null or undefined
            assertParamExists('updateCustomField', 'customfieldid', customfieldid)
            // verify required parameter 'customFieldsResource' is not null or undefined
            assertParamExists('updateCustomField', 'customFieldsResource', customFieldsResource)
            const localVarPath = `/companies/{companyId}/customfields/{customfieldid}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"customfieldid"}}`, encodeURIComponent(String(customfieldid !== undefined ? customfieldid : `-customfieldid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.paychex.company.customfields.v1+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customFieldsResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/customfields/{customfieldid}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customFieldsResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update  CustomFieldsCategory at the company level.
         * @summary Custom Fields Category
         * @param {string} companyId ID associated with desired company.
         * @param {string} categoryid ID associated with desired custom field.
         * @param {CustomFieldsCategoryResource} customFieldsCategoryResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomFieldsCategory: async (companyId: string, categoryid: string, customFieldsCategoryResource: CustomFieldsCategoryResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateCustomFieldsCategory', 'companyId', companyId)
            // verify required parameter 'categoryid' is not null or undefined
            assertParamExists('updateCustomFieldsCategory', 'categoryid', categoryid)
            // verify required parameter 'customFieldsCategoryResource' is not null or undefined
            assertParamExists('updateCustomFieldsCategory', 'customFieldsCategoryResource', customFieldsCategoryResource)
            const localVarPath = `/companies/{companyId}/customfieldscategories/{categoryid}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"categoryid"}}`, encodeURIComponent(String(categoryid !== undefined ? categoryid : `-categoryid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customFieldsCategoryResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/customfieldscategories/{categoryid}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customFieldsCategoryResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a single Job.
         * @summary Company Job
         * @param {string} companyId The ID of the company.
         * @param {string} jobId The ID of the job.
         * @param {JobResource} jobResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJob: async (companyId: string, jobId: string, jobResource: JobResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('updateJob', 'companyId', companyId)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('updateJob', 'jobId', jobId)
            // verify required parameter 'jobResource' is not null or undefined
            assertParamExists('updateJob', 'jobResource', jobResource)
            const localVarPath = `/companies/{companyId}/jobs/{jobId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId !== undefined ? jobId : `-jobId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: jobResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/jobs/{jobId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(jobResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyApi - functional programming interface
 * @export
 */
export const CompanyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyApiAxiosParamCreator(configuration)
    return {
        /**
         * Add one or more workers to a specific company that your application has been granted access to. These workers will be added with an IN_PROGRESS status assigned to them.  In_Progress workers will pre-populated within Paychex Flex and will require someone to complete them to be fully available with the Flex platform.  Paychex Flex UI will hold a majority of validation, rules, and enforced required fields based on the clients configuration.  Required fields are givenName, familyName, & workerType (when adding multiple workers at a time you will need to also include a \"workerCorrelationId\" data element on each worker, that will be used as an identifier in our responses). Optionally you can include a workers communications object within the worker.  Once generated the IN_PROGRESS worker can have their communications, Compensation and Federal Taxes POSTed and PATCHed using the generated workerId.
         * @summary In Progress Workers
         * @param {CompanyApiAddInProgressWorkersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addInProgressWorkers(requestParameters: CompanyApiAddInProgressWorkersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerResource>> {
            const workerResource: WorkerResource = {
                workerId: requestParameters.workerId,
                employeeId: requestParameters.employeeId,
                workerType: requestParameters.workerType,
                employmentType: requestParameters.employmentType,
                exemptionType: requestParameters.exemptionType,
                birthDate: requestParameters.birthDate,
                sex: requestParameters.sex,
                ethnicityCode: requestParameters.ethnicityCode,
                hireDate: requestParameters.hireDate,
                clockId: requestParameters.clockId,
                name: requestParameters.name,
                legalId: requestParameters.legalId,
                laborAssignmentId: requestParameters.laborAssignmentId,
                jobId: requestParameters.jobId,
                locationId: requestParameters.locationId,
                job: requestParameters.job,
                organization: requestParameters.organization,
                supervisor: requestParameters.supervisor,
                currentStatus: requestParameters.currentStatus,
                communications: requestParameters.communications,
                workerCorrelationId: requestParameters.workerCorrelationId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addInProgressWorkers(requestParameters.companyId, workerResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a company level job. If a client has their job numbering structured in 2-3 separate \'segments\', you may need to first do a GET on the jobsegements endpoint, so you can see how many segments and the character length of each segment, as well as the name of those segments, which you will need to have before you POST.
         * @summary Company Job
         * @param {CompanyApiAddJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addJob(requestParameters: CompanyApiAddJobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobResource>> {
            const jobResource: JobResource = {
                jobId: requestParameters.jobId,
                jobCorrelationId: requestParameters.jobCorrelationId,
                jobName: requestParameters.jobName,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate,
                links: requestParameters.links,
                jobNumber: requestParameters.jobNumber
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addJob(requestParameters.companyId, jobResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create CustomFields at the company level which a company could be assigned.
         * @summary Custom Field
         * @param {CompanyApiCreateCustomFieldAtCompanyLevelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomFieldAtCompanyLevel(requestParameters: CompanyApiCreateCustomFieldAtCompanyLevelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsResource>> {
            const customFieldsResource: CustomFieldsResource = {
                customFieldId: requestParameters.customFieldId,
                customFieldName: requestParameters.customFieldName,
                categoryId: requestParameters.categoryId,
                required: requestParameters.required,
                checkStub: requestParameters.checkStub,
                employeeEditable: requestParameters.employeeEditable,
                type: requestParameters.type,
                booleanValue: requestParameters.booleanValue,
                links: requestParameters.links,
                dateValue: requestParameters.dateValue,
                textValue: requestParameters.textValue,
                maxTextLength: requestParameters.maxTextLength,
                numericValue: requestParameters.numericValue,
                dropdown: requestParameters.dropdown
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomFieldAtCompanyLevel(requestParameters.companyId, customFieldsResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create CustomFieldsCategory at the company level which a company could be assigned.
         * @summary Custom Fields Category
         * @param {CompanyApiCreateCustomFieldCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomFieldCategory(requestParameters: CompanyApiCreateCustomFieldCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsCategoryResource>> {
            const customFieldsCategoryResource: CustomFieldsCategoryResource = {
                categoryId: requestParameters.categoryId,
                categoryName: requestParameters.categoryName,
                links: requestParameters.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomFieldCategory(requestParameters.companyId, customFieldsCategoryResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete CustomField at the company level.
         * @summary Custom Field
         * @param {CompanyApiDeleteCustomFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomField(requestParameters: CompanyApiDeleteCustomFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomField(requestParameters.companyId, requestParameters.customfieldid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete CustomFieldsCategory at the company level.
         * @summary Custom Fields Category
         * @param {CompanyApiDeleteCustomFieldsCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomFieldsCategory(requestParameters: CompanyApiDeleteCustomFieldsCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomFieldsCategory(requestParameters.companyId, requestParameters.categoryid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Array of calculation bases that are used with a worker pay components that are not FLAT_DOLLAR_AMOUNT allow you to determine what to apply the calculation against when determining the amount during the pay run.
         * @summary Company Calculation Bases
         * @param {CompanyApiGetCalculationBasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCalculationBases(requestParameters: CompanyApiGetCalculationBasesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalculationBase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCalculationBases(requestParameters.companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Information about contact types that your application has been granted access to.
         * @summary Company Contact Types
         * @param {CompanyApiGetContactTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContactTypes(requestParameters: CompanyApiGetContactTypesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactTypeResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContactTypes(requestParameters.companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Information about a single CustomField.
         * @summary Custom Field
         * @param {CompanyApiGetCustomFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomField(requestParameters: CompanyApiGetCustomFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomField(requestParameters.companyId, requestParameters.customFieldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Array of CustomFieldsCategories Configured at the company level 
         * @summary Custom Fields Categories
         * @param {CompanyApiGetCustomFieldCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomFieldCategories(requestParameters: CompanyApiGetCustomFieldCategoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsCategoryResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomFieldCategories(requestParameters.companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Array of customFields Configured at the company level 
         * @summary Custom Fields
         * @param {CompanyApiGetCustomFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomFields(requestParameters: CompanyApiGetCustomFieldsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomFields(requestParameters.companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Information about a single CustomFieldsCategory.
         * @summary Custom Fields Category
         * @param {CompanyApiGetCustomFieldsCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomFieldsCategory(requestParameters: CompanyApiGetCustomFieldsCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsCategoryResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomFieldsCategory(requestParameters.companyId, requestParameters.categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Information about a single company that your application has access to.
         * @summary A Company
         * @param {CompanyApiGetInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInformation(requestParameters: CompanyApiGetInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInformation(requestParameters.companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Information about a single Job.
         * @summary Company Job
         * @param {CompanyApiGetJobInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobInformation(requestParameters: CompanyApiGetJobInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobInformation(requestParameters.companyId, requestParameters.jobId, requestParameters.asof, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve job segment structure setup for this client. This endpoint is only available if the client has their job numbering set up in \'2-3 separate \'segments\'.  The response will give you back the exact character lengths and the segment names so you are able to POST.
         * @summary Company Job Segments
         * @param {CompanyApiGetJobSegmentStructureSetupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobSegmentStructureSetup(requestParameters: CompanyApiGetJobSegmentStructureSetupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobSegmentsConfigResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobSegmentStructureSetup(requestParameters.companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Information about a single Job Title.
         * @summary Job Title
         * @param {CompanyApiGetJobTitleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobTitle(requestParameters: CompanyApiGetJobTitleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobTitleResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobTitle(requestParameters.companyId, requestParameters.workerJobTitleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Array of jobs set at the company level.
         * @summary Company Jobs
         * @param {CompanyApiGetJobsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobs(requestParameters: CompanyApiGetJobsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobs(requestParameters.companyId, requestParameters.asof, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Information about a single Labor Assignment.
         * @summary Company Labour Assignment
         * @param {CompanyApiGetLaborAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLaborAssignment(requestParameters: CompanyApiGetLaborAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LaborAssignmentResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLaborAssignment(requestParameters.companyId, requestParameters.laborAssignmentId, requestParameters.asof, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Information about a single Location.
         * @summary Company Location
         * @param {CompanyApiGetLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocation(requestParameters: CompanyApiGetLocationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocation(requestParameters.companyId, requestParameters.locationId, requestParameters.asof, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Array of locations set at the company level.
         * @summary Company Locations
         * @param {CompanyApiGetLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocations(requestParameters: CompanyApiGetLocationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocations(requestParameters.companyId, requestParameters.asof, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Information about a single Organization.
         * @summary Company Organization
         * @param {CompanyApiGetOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganization(requestParameters: CompanyApiGetOrganizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(requestParameters.companyId, requestParameters.organizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Array of organizations set at the company level.
         * @summary Company Organizations
         * @param {CompanyApiGetOrganizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizations(requestParameters: CompanyApiGetOrganizationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizations(requestParameters.companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Array of pay frequencies that workers maybe paid on. This is a generic array that is currently not specific to the companies pay frequency. This is to be used with the workers pay components to determine what the frequency, occurrence, and intervals are allowed.
         * @summary Company Pay Frequencies
         * @param {CompanyApiGetPayFrequenciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayFrequencies(requestParameters: CompanyApiGetPayFrequenciesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrequencyCombinationUnitResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayFrequencies(requestParameters.companyId, requestParameters.payfrequency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Information about a single status.
         * @summary Company Worker Status
         * @param {CompanyApiGetStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatus(requestParameters: CompanyApiGetStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatus(requestParameters.companyId, requestParameters.workerStatusId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Array of workers (employee and contractor) for all of the companies who are associated with a specific company that your application has been granted access to. The combination of query parameters to be used with this endpoint are as follows:  1. givenname, familyname, legallastfour  2. from, to (start date, end date)  3. employeeid  4. locationid  5. offset, limit (paging).  Note: Paging and filtering attributes cannot be applied together. 
         * @summary Company Workers
         * @param {CompanyApiGetWorkersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkers(requestParameters: CompanyApiGetWorkersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkers(requestParameters.companyId, requestParameters.givenname, requestParameters.familyname, requestParameters.legallastfour, requestParameters.employeeid, requestParameters.from, requestParameters.to, requestParameters.locationid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Array of companies that your application has been granted with some level of access. Your Application (API Key) can be granted access to one or more companies (clients) accounts that are associated with one or more product lines within Paychex.
         * @summary Companies
         * @param {CompanyApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: CompanyApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.displayid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Array of job titles set at the company level which a worker could be assigned.
         * @summary Company Job Titles
         * @param {CompanyApiListJobTitlesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listJobTitles(requestParameters: CompanyApiListJobTitlesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobTitleResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listJobTitles(requestParameters.companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Array of labor assignments set at the company level.
         * @summary Company Labour Assignments
         * @param {CompanyApiListLaborAssignmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLaborAssignments(requestParameters: CompanyApiListLaborAssignmentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LaborAssignmentResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLaborAssignments(requestParameters.companyId, requestParameters.asof, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Array of statuses set at the company level which a worker could be assigned.
         * @summary Company Worker Statuses
         * @param {CompanyApiListWorkerStatusesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkerStatuses(requestParameters: CompanyApiListWorkerStatusesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkerStatuses(requestParameters.companyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update CustomFields at the company level which a company could be assigned.
         * @summary Custom Field
         * @param {CompanyApiUpdateCustomFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomField(requestParameters: CompanyApiUpdateCustomFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsResource>> {
            const customFieldsResource: CustomFieldsResource = {
                customFieldId: requestParameters.customFieldId,
                customFieldName: requestParameters.customFieldName,
                categoryId: requestParameters.categoryId,
                required: requestParameters.required,
                checkStub: requestParameters.checkStub,
                employeeEditable: requestParameters.employeeEditable,
                type: requestParameters.type,
                booleanValue: requestParameters.booleanValue,
                links: requestParameters.links,
                dateValue: requestParameters.dateValue,
                textValue: requestParameters.textValue,
                maxTextLength: requestParameters.maxTextLength,
                numericValue: requestParameters.numericValue,
                dropdown: requestParameters.dropdown
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomField(requestParameters.companyId, requestParameters.customfieldid, customFieldsResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update  CustomFieldsCategory at the company level.
         * @summary Custom Fields Category
         * @param {CompanyApiUpdateCustomFieldsCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomFieldsCategory(requestParameters: CompanyApiUpdateCustomFieldsCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsCategoryResource>> {
            const customFieldsCategoryResource: CustomFieldsCategoryResource = {
                categoryId: requestParameters.categoryId,
                categoryName: requestParameters.categoryName,
                links: requestParameters.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomFieldsCategory(requestParameters.companyId, requestParameters.categoryid, customFieldsCategoryResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a single Job.
         * @summary Company Job
         * @param {CompanyApiUpdateJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateJob(requestParameters: CompanyApiUpdateJobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobResource>> {
            const jobResource: JobResource = {
                jobId: requestParameters.requestBody.jobId,
                jobCorrelationId: requestParameters.requestBody.jobCorrelationId,
                jobName: requestParameters.requestBody.jobName,
                startDate: requestParameters.requestBody.startDate,
                endDate: requestParameters.requestBody.endDate,
                links: requestParameters.requestBody.links,
                jobNumber: requestParameters.requestBody.jobNumber
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateJob(requestParameters.companyId, requestParameters.jobId, jobResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyApi - factory interface
 * @export
 */
export const CompanyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyApiFp(configuration)
    return {
        /**
         * Add one or more workers to a specific company that your application has been granted access to. These workers will be added with an IN_PROGRESS status assigned to them.  In_Progress workers will pre-populated within Paychex Flex and will require someone to complete them to be fully available with the Flex platform.  Paychex Flex UI will hold a majority of validation, rules, and enforced required fields based on the clients configuration.  Required fields are givenName, familyName, & workerType (when adding multiple workers at a time you will need to also include a \"workerCorrelationId\" data element on each worker, that will be used as an identifier in our responses). Optionally you can include a workers communications object within the worker.  Once generated the IN_PROGRESS worker can have their communications, Compensation and Federal Taxes POSTed and PATCHed using the generated workerId.
         * @summary In Progress Workers
         * @param {CompanyApiAddInProgressWorkersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInProgressWorkers(requestParameters: CompanyApiAddInProgressWorkersRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerResource> {
            return localVarFp.addInProgressWorkers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a company level job. If a client has their job numbering structured in 2-3 separate \'segments\', you may need to first do a GET on the jobsegements endpoint, so you can see how many segments and the character length of each segment, as well as the name of those segments, which you will need to have before you POST.
         * @summary Company Job
         * @param {CompanyApiAddJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addJob(requestParameters: CompanyApiAddJobRequest, options?: AxiosRequestConfig): AxiosPromise<JobResource> {
            return localVarFp.addJob(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create CustomFields at the company level which a company could be assigned.
         * @summary Custom Field
         * @param {CompanyApiCreateCustomFieldAtCompanyLevelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomFieldAtCompanyLevel(requestParameters: CompanyApiCreateCustomFieldAtCompanyLevelRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsResource> {
            return localVarFp.createCustomFieldAtCompanyLevel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create CustomFieldsCategory at the company level which a company could be assigned.
         * @summary Custom Fields Category
         * @param {CompanyApiCreateCustomFieldCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomFieldCategory(requestParameters: CompanyApiCreateCustomFieldCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsCategoryResource> {
            return localVarFp.createCustomFieldCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete CustomField at the company level.
         * @summary Custom Field
         * @param {CompanyApiDeleteCustomFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomField(requestParameters: CompanyApiDeleteCustomFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCustomField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete CustomFieldsCategory at the company level.
         * @summary Custom Fields Category
         * @param {CompanyApiDeleteCustomFieldsCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomFieldsCategory(requestParameters: CompanyApiDeleteCustomFieldsCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCustomFieldsCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Array of calculation bases that are used with a worker pay components that are not FLAT_DOLLAR_AMOUNT allow you to determine what to apply the calculation against when determining the amount during the pay run.
         * @summary Company Calculation Bases
         * @param {CompanyApiGetCalculationBasesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCalculationBases(requestParameters: CompanyApiGetCalculationBasesRequest, options?: AxiosRequestConfig): AxiosPromise<CalculationBase> {
            return localVarFp.getCalculationBases(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Information about contact types that your application has been granted access to.
         * @summary Company Contact Types
         * @param {CompanyApiGetContactTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactTypes(requestParameters: CompanyApiGetContactTypesRequest, options?: AxiosRequestConfig): AxiosPromise<ContactTypeResource> {
            return localVarFp.getContactTypes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Information about a single CustomField.
         * @summary Custom Field
         * @param {CompanyApiGetCustomFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomField(requestParameters: CompanyApiGetCustomFieldRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsResource> {
            return localVarFp.getCustomField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Array of CustomFieldsCategories Configured at the company level 
         * @summary Custom Fields Categories
         * @param {CompanyApiGetCustomFieldCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFieldCategories(requestParameters: CompanyApiGetCustomFieldCategoriesRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsCategoryResource> {
            return localVarFp.getCustomFieldCategories(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Array of customFields Configured at the company level 
         * @summary Custom Fields
         * @param {CompanyApiGetCustomFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFields(requestParameters: CompanyApiGetCustomFieldsRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsResource> {
            return localVarFp.getCustomFields(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Information about a single CustomFieldsCategory.
         * @summary Custom Fields Category
         * @param {CompanyApiGetCustomFieldsCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFieldsCategory(requestParameters: CompanyApiGetCustomFieldsCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsCategoryResource> {
            return localVarFp.getCustomFieldsCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Information about a single company that your application has access to.
         * @summary A Company
         * @param {CompanyApiGetInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation(requestParameters: CompanyApiGetInformationRequest, options?: AxiosRequestConfig): AxiosPromise<CompanyResource> {
            return localVarFp.getInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Information about a single Job.
         * @summary Company Job
         * @param {CompanyApiGetJobInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobInformation(requestParameters: CompanyApiGetJobInformationRequest, options?: AxiosRequestConfig): AxiosPromise<JobResource> {
            return localVarFp.getJobInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve job segment structure setup for this client. This endpoint is only available if the client has their job numbering set up in \'2-3 separate \'segments\'.  The response will give you back the exact character lengths and the segment names so you are able to POST.
         * @summary Company Job Segments
         * @param {CompanyApiGetJobSegmentStructureSetupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobSegmentStructureSetup(requestParameters: CompanyApiGetJobSegmentStructureSetupRequest, options?: AxiosRequestConfig): AxiosPromise<JobSegmentsConfigResource> {
            return localVarFp.getJobSegmentStructureSetup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Information about a single Job Title.
         * @summary Job Title
         * @param {CompanyApiGetJobTitleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobTitle(requestParameters: CompanyApiGetJobTitleRequest, options?: AxiosRequestConfig): AxiosPromise<JobTitleResource> {
            return localVarFp.getJobTitle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Array of jobs set at the company level.
         * @summary Company Jobs
         * @param {CompanyApiGetJobsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobs(requestParameters: CompanyApiGetJobsRequest, options?: AxiosRequestConfig): AxiosPromise<JobResource> {
            return localVarFp.getJobs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Information about a single Labor Assignment.
         * @summary Company Labour Assignment
         * @param {CompanyApiGetLaborAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLaborAssignment(requestParameters: CompanyApiGetLaborAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<LaborAssignmentResource> {
            return localVarFp.getLaborAssignment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Information about a single Location.
         * @summary Company Location
         * @param {CompanyApiGetLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocation(requestParameters: CompanyApiGetLocationRequest, options?: AxiosRequestConfig): AxiosPromise<LocationResource> {
            return localVarFp.getLocation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Array of locations set at the company level.
         * @summary Company Locations
         * @param {CompanyApiGetLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocations(requestParameters: CompanyApiGetLocationsRequest, options?: AxiosRequestConfig): AxiosPromise<LocationResource> {
            return localVarFp.getLocations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Information about a single Organization.
         * @summary Company Organization
         * @param {CompanyApiGetOrganizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization(requestParameters: CompanyApiGetOrganizationRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationResource> {
            return localVarFp.getOrganization(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Array of organizations set at the company level.
         * @summary Company Organizations
         * @param {CompanyApiGetOrganizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizations(requestParameters: CompanyApiGetOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationResource> {
            return localVarFp.getOrganizations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Array of pay frequencies that workers maybe paid on. This is a generic array that is currently not specific to the companies pay frequency. This is to be used with the workers pay components to determine what the frequency, occurrence, and intervals are allowed.
         * @summary Company Pay Frequencies
         * @param {CompanyApiGetPayFrequenciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayFrequencies(requestParameters: CompanyApiGetPayFrequenciesRequest, options?: AxiosRequestConfig): AxiosPromise<FrequencyCombinationUnitResource> {
            return localVarFp.getPayFrequencies(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Information about a single status.
         * @summary Company Worker Status
         * @param {CompanyApiGetStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus(requestParameters: CompanyApiGetStatusRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerStatus> {
            return localVarFp.getStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Array of workers (employee and contractor) for all of the companies who are associated with a specific company that your application has been granted access to. The combination of query parameters to be used with this endpoint are as follows:  1. givenname, familyname, legallastfour  2. from, to (start date, end date)  3. employeeid  4. locationid  5. offset, limit (paging).  Note: Paging and filtering attributes cannot be applied together. 
         * @summary Company Workers
         * @param {CompanyApiGetWorkersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkers(requestParameters: CompanyApiGetWorkersRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerResource> {
            return localVarFp.getWorkers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Array of companies that your application has been granted with some level of access. Your Application (API Key) can be granted access to one or more companies (clients) accounts that are associated with one or more product lines within Paychex.
         * @summary Companies
         * @param {CompanyApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: CompanyApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CompanyResource> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Array of job titles set at the company level which a worker could be assigned.
         * @summary Company Job Titles
         * @param {CompanyApiListJobTitlesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobTitles(requestParameters: CompanyApiListJobTitlesRequest, options?: AxiosRequestConfig): AxiosPromise<JobTitleResource> {
            return localVarFp.listJobTitles(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Array of labor assignments set at the company level.
         * @summary Company Labour Assignments
         * @param {CompanyApiListLaborAssignmentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLaborAssignments(requestParameters: CompanyApiListLaborAssignmentsRequest, options?: AxiosRequestConfig): AxiosPromise<LaborAssignmentResource> {
            return localVarFp.listLaborAssignments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Array of statuses set at the company level which a worker could be assigned.
         * @summary Company Worker Statuses
         * @param {CompanyApiListWorkerStatusesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkerStatuses(requestParameters: CompanyApiListWorkerStatusesRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerStatus> {
            return localVarFp.listWorkerStatuses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update CustomFields at the company level which a company could be assigned.
         * @summary Custom Field
         * @param {CompanyApiUpdateCustomFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomField(requestParameters: CompanyApiUpdateCustomFieldRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsResource> {
            return localVarFp.updateCustomField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update  CustomFieldsCategory at the company level.
         * @summary Custom Fields Category
         * @param {CompanyApiUpdateCustomFieldsCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomFieldsCategory(requestParameters: CompanyApiUpdateCustomFieldsCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsCategoryResource> {
            return localVarFp.updateCustomFieldsCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a single Job.
         * @summary Company Job
         * @param {CompanyApiUpdateJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJob(requestParameters: CompanyApiUpdateJobRequest, options?: AxiosRequestConfig): AxiosPromise<JobResource> {
            return localVarFp.updateJob(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addInProgressWorkers operation in CompanyApi.
 * @export
 * @interface CompanyApiAddInProgressWorkersRequest
 */
export type CompanyApiAddInProgressWorkersRequest = {
    
    /**
    * The id assigned to the company that workers are being requested for.
    * @type {string}
    * @memberof CompanyApiAddInProgressWorkers
    */
    readonly companyId: string
    
} & WorkerResource

/**
 * Request parameters for addJob operation in CompanyApi.
 * @export
 * @interface CompanyApiAddJobRequest
 */
export type CompanyApiAddJobRequest = {
    
    /**
    * The ID of the company.
    * @type {string}
    * @memberof CompanyApiAddJob
    */
    readonly companyId: string
    
} & JobResource

/**
 * Request parameters for createCustomFieldAtCompanyLevel operation in CompanyApi.
 * @export
 * @interface CompanyApiCreateCustomFieldAtCompanyLevelRequest
 */
export type CompanyApiCreateCustomFieldAtCompanyLevelRequest = {
    
    /**
    * ID associated with desired company.
    * @type {string}
    * @memberof CompanyApiCreateCustomFieldAtCompanyLevel
    */
    readonly companyId: string
    
} & CustomFieldsResource

/**
 * Request parameters for createCustomFieldCategory operation in CompanyApi.
 * @export
 * @interface CompanyApiCreateCustomFieldCategoryRequest
 */
export type CompanyApiCreateCustomFieldCategoryRequest = {
    
    /**
    * ID associated with desired company.
    * @type {string}
    * @memberof CompanyApiCreateCustomFieldCategory
    */
    readonly companyId: string
    
} & CustomFieldsCategoryResource

/**
 * Request parameters for deleteCustomField operation in CompanyApi.
 * @export
 * @interface CompanyApiDeleteCustomFieldRequest
 */
export type CompanyApiDeleteCustomFieldRequest = {
    
    /**
    * ID associated with desired company.
    * @type {string}
    * @memberof CompanyApiDeleteCustomField
    */
    readonly companyId: string
    
    /**
    * ID associated with desired custom field.
    * @type {string}
    * @memberof CompanyApiDeleteCustomField
    */
    readonly customfieldid: string
    
}

/**
 * Request parameters for deleteCustomFieldsCategory operation in CompanyApi.
 * @export
 * @interface CompanyApiDeleteCustomFieldsCategoryRequest
 */
export type CompanyApiDeleteCustomFieldsCategoryRequest = {
    
    /**
    * ID associated with desired company.
    * @type {string}
    * @memberof CompanyApiDeleteCustomFieldsCategory
    */
    readonly companyId: string
    
    /**
    * ID associated with desired category.
    * @type {string}
    * @memberof CompanyApiDeleteCustomFieldsCategory
    */
    readonly categoryid: string
    
}

/**
 * Request parameters for getCalculationBases operation in CompanyApi.
 * @export
 * @interface CompanyApiGetCalculationBasesRequest
 */
export type CompanyApiGetCalculationBasesRequest = {
    
    /**
    * The ID of the company.
    * @type {string}
    * @memberof CompanyApiGetCalculationBases
    */
    readonly companyId: string
    
}

/**
 * Request parameters for getContactTypes operation in CompanyApi.
 * @export
 * @interface CompanyApiGetContactTypesRequest
 */
export type CompanyApiGetContactTypesRequest = {
    
    /**
    * ID associated with desired company.
    * @type {string}
    * @memberof CompanyApiGetContactTypes
    */
    readonly companyId: string
    
}

/**
 * Request parameters for getCustomField operation in CompanyApi.
 * @export
 * @interface CompanyApiGetCustomFieldRequest
 */
export type CompanyApiGetCustomFieldRequest = {
    
    /**
    * ID associated with desired company.
    * @type {string}
    * @memberof CompanyApiGetCustomField
    */
    readonly companyId: string
    
    /**
    * ID associated with desired custom field.
    * @type {string}
    * @memberof CompanyApiGetCustomField
    */
    readonly customFieldId: string
    
}

/**
 * Request parameters for getCustomFieldCategories operation in CompanyApi.
 * @export
 * @interface CompanyApiGetCustomFieldCategoriesRequest
 */
export type CompanyApiGetCustomFieldCategoriesRequest = {
    
    /**
    * ID associated with desired company.
    * @type {string}
    * @memberof CompanyApiGetCustomFieldCategories
    */
    readonly companyId: string
    
}

/**
 * Request parameters for getCustomFields operation in CompanyApi.
 * @export
 * @interface CompanyApiGetCustomFieldsRequest
 */
export type CompanyApiGetCustomFieldsRequest = {
    
    /**
    * ID associated with desired company.
    * @type {string}
    * @memberof CompanyApiGetCustomFields
    */
    readonly companyId: string
    
}

/**
 * Request parameters for getCustomFieldsCategory operation in CompanyApi.
 * @export
 * @interface CompanyApiGetCustomFieldsCategoryRequest
 */
export type CompanyApiGetCustomFieldsCategoryRequest = {
    
    /**
    * ID associated with desired company.
    * @type {string}
    * @memberof CompanyApiGetCustomFieldsCategory
    */
    readonly companyId: string
    
    /**
    * ID associated with desired category.
    * @type {string}
    * @memberof CompanyApiGetCustomFieldsCategory
    */
    readonly categoryId: string
    
}

/**
 * Request parameters for getInformation operation in CompanyApi.
 * @export
 * @interface CompanyApiGetInformationRequest
 */
export type CompanyApiGetInformationRequest = {
    
    /**
    * The ID of the company.
    * @type {string}
    * @memberof CompanyApiGetInformation
    */
    readonly companyId: string
    
}

/**
 * Request parameters for getJobInformation operation in CompanyApi.
 * @export
 * @interface CompanyApiGetJobInformationRequest
 */
export type CompanyApiGetJobInformationRequest = {
    
    /**
    * The ID of the company.
    * @type {string}
    * @memberof CompanyApiGetJobInformation
    */
    readonly companyId: string
    
    /**
    * The ID of the job.
    * @type {string}
    * @memberof CompanyApiGetJobInformation
    */
    readonly jobId: string
    
    /**
    * Returns job as of the date used in the request.
    * @type {string}
    * @memberof CompanyApiGetJobInformation
    */
    readonly asof?: string
    
}

/**
 * Request parameters for getJobSegmentStructureSetup operation in CompanyApi.
 * @export
 * @interface CompanyApiGetJobSegmentStructureSetupRequest
 */
export type CompanyApiGetJobSegmentStructureSetupRequest = {
    
    /**
    * The ID of the company.
    * @type {string}
    * @memberof CompanyApiGetJobSegmentStructureSetup
    */
    readonly companyId: string
    
}

/**
 * Request parameters for getJobTitle operation in CompanyApi.
 * @export
 * @interface CompanyApiGetJobTitleRequest
 */
export type CompanyApiGetJobTitleRequest = {
    
    /**
    * The ID of the company.
    * @type {string}
    * @memberof CompanyApiGetJobTitle
    */
    readonly companyId: string
    
    /**
    * The ID of the worker job title.
    * @type {string}
    * @memberof CompanyApiGetJobTitle
    */
    readonly workerJobTitleId: string
    
}

/**
 * Request parameters for getJobs operation in CompanyApi.
 * @export
 * @interface CompanyApiGetJobsRequest
 */
export type CompanyApiGetJobsRequest = {
    
    /**
    * The ID of the company.
    * @type {string}
    * @memberof CompanyApiGetJobs
    */
    readonly companyId: string
    
    /**
    * Returns all jobs as of the date used in the request.
    * @type {string}
    * @memberof CompanyApiGetJobs
    */
    readonly asof?: string
    
}

/**
 * Request parameters for getLaborAssignment operation in CompanyApi.
 * @export
 * @interface CompanyApiGetLaborAssignmentRequest
 */
export type CompanyApiGetLaborAssignmentRequest = {
    
    /**
    * The ID of the company.
    * @type {string}
    * @memberof CompanyApiGetLaborAssignment
    */
    readonly companyId: string
    
    /**
    * The ID of the labor assignment.
    * @type {string}
    * @memberof CompanyApiGetLaborAssignment
    */
    readonly laborAssignmentId: string
    
    /**
    * Returns labour assignment as of the date used in the request.
    * @type {string}
    * @memberof CompanyApiGetLaborAssignment
    */
    readonly asof?: string
    
}

/**
 * Request parameters for getLocation operation in CompanyApi.
 * @export
 * @interface CompanyApiGetLocationRequest
 */
export type CompanyApiGetLocationRequest = {
    
    /**
    * ID associated with desired company.
    * @type {string}
    * @memberof CompanyApiGetLocation
    */
    readonly companyId: string
    
    /**
    * The ID of the location.
    * @type {string}
    * @memberof CompanyApiGetLocation
    */
    readonly locationId: string
    
    /**
    * Returns location as of the date used in the request.
    * @type {string}
    * @memberof CompanyApiGetLocation
    */
    readonly asof?: string
    
}

/**
 * Request parameters for getLocations operation in CompanyApi.
 * @export
 * @interface CompanyApiGetLocationsRequest
 */
export type CompanyApiGetLocationsRequest = {
    
    /**
    * The ID of the company.
    * @type {string}
    * @memberof CompanyApiGetLocations
    */
    readonly companyId: string
    
    /**
    * Returns all locations as of the date used in the request.
    * @type {string}
    * @memberof CompanyApiGetLocations
    */
    readonly asof?: string
    
}

/**
 * Request parameters for getOrganization operation in CompanyApi.
 * @export
 * @interface CompanyApiGetOrganizationRequest
 */
export type CompanyApiGetOrganizationRequest = {
    
    /**
    * The ID of the company.
    * @type {string}
    * @memberof CompanyApiGetOrganization
    */
    readonly companyId: string
    
    /**
    * The ID of the organization.
    * @type {string}
    * @memberof CompanyApiGetOrganization
    */
    readonly organizationId: string
    
}

/**
 * Request parameters for getOrganizations operation in CompanyApi.
 * @export
 * @interface CompanyApiGetOrganizationsRequest
 */
export type CompanyApiGetOrganizationsRequest = {
    
    /**
    * The ID of the company.
    * @type {string}
    * @memberof CompanyApiGetOrganizations
    */
    readonly companyId: string
    
}

/**
 * Request parameters for getPayFrequencies operation in CompanyApi.
 * @export
 * @interface CompanyApiGetPayFrequenciesRequest
 */
export type CompanyApiGetPayFrequenciesRequest = {
    
    /**
    * The ID of the company.
    * @type {string}
    * @memberof CompanyApiGetPayFrequencies
    */
    readonly companyId: string
    
    /**
    * The frequency that you would like to search for.
    * @type {string}
    * @memberof CompanyApiGetPayFrequencies
    */
    readonly payfrequency?: string
    
}

/**
 * Request parameters for getStatus operation in CompanyApi.
 * @export
 * @interface CompanyApiGetStatusRequest
 */
export type CompanyApiGetStatusRequest = {
    
    /**
    * The ID of the company.
    * @type {string}
    * @memberof CompanyApiGetStatus
    */
    readonly companyId: string
    
    /**
    * The ID of the worker status.
    * @type {string}
    * @memberof CompanyApiGetStatus
    */
    readonly workerStatusId: string
    
}

/**
 * Request parameters for getWorkers operation in CompanyApi.
 * @export
 * @interface CompanyApiGetWorkersRequest
 */
export type CompanyApiGetWorkersRequest = {
    
    /**
    * The id assigned to the company that workers are being requested for.
    * @type {string}
    * @memberof CompanyApiGetWorkers
    */
    readonly companyId: string
    
    /**
    * The given or first name of the workers to search for.
    * @type {string}
    * @memberof CompanyApiGetWorkers
    */
    readonly givenname?: string
    
    /**
    * The family or last name of the workers to search for.
    * @type {string}
    * @memberof CompanyApiGetWorkers
    */
    readonly familyname?: string
    
    /**
    * The last 4 digits of the workers federal level taxpayer id number of the worker to search for.
    * @type {string}
    * @memberof CompanyApiGetWorkers
    */
    readonly legallastfour?: string
    
    /**
    * The assigned workers employee ID.
    * @type {string}
    * @memberof CompanyApiGetWorkers
    */
    readonly employeeid?: string
    
    /**
    * The beginning of the search date range using for when the worker was created.
    * @type {string}
    * @memberof CompanyApiGetWorkers
    */
    readonly from?: string
    
    /**
    * The ending of the search date range using for then the worker was created.
    * @type {string}
    * @memberof CompanyApiGetWorkers
    */
    readonly to?: string
    
    /**
    * The location Id.
    * @type {string}
    * @memberof CompanyApiGetWorkers
    */
    readonly locationid?: string
    
}

/**
 * Request parameters for list operation in CompanyApi.
 * @export
 * @interface CompanyApiListRequest
 */
export type CompanyApiListRequest = {
    
    /**
    * The client account number used for identification purposes. (no dash or spaces allowed, only the last 8 characters  of the ID)
    * @type {string}
    * @memberof CompanyApiList
    */
    readonly displayid?: string
    
}

/**
 * Request parameters for listJobTitles operation in CompanyApi.
 * @export
 * @interface CompanyApiListJobTitlesRequest
 */
export type CompanyApiListJobTitlesRequest = {
    
    /**
    * The ID of the company.
    * @type {string}
    * @memberof CompanyApiListJobTitles
    */
    readonly companyId: string
    
}

/**
 * Request parameters for listLaborAssignments operation in CompanyApi.
 * @export
 * @interface CompanyApiListLaborAssignmentsRequest
 */
export type CompanyApiListLaborAssignmentsRequest = {
    
    /**
    * The ID of the company.
    * @type {string}
    * @memberof CompanyApiListLaborAssignments
    */
    readonly companyId: string
    
    /**
    * Returns all labour assignments as of the date used in the request.
    * @type {string}
    * @memberof CompanyApiListLaborAssignments
    */
    readonly asof?: string
    
}

/**
 * Request parameters for listWorkerStatuses operation in CompanyApi.
 * @export
 * @interface CompanyApiListWorkerStatusesRequest
 */
export type CompanyApiListWorkerStatusesRequest = {
    
    /**
    * The ID of the company.
    * @type {string}
    * @memberof CompanyApiListWorkerStatuses
    */
    readonly companyId: string
    
}

/**
 * Request parameters for updateCustomField operation in CompanyApi.
 * @export
 * @interface CompanyApiUpdateCustomFieldRequest
 */
export type CompanyApiUpdateCustomFieldRequest = {
    
    /**
    * ID associated with desired company.
    * @type {string}
    * @memberof CompanyApiUpdateCustomField
    */
    readonly companyId: string
    
    /**
    * ID associated with desired custom field.
    * @type {string}
    * @memberof CompanyApiUpdateCustomField
    */
    readonly customfieldid: string
    
} & CustomFieldsResource

/**
 * Request parameters for updateCustomFieldsCategory operation in CompanyApi.
 * @export
 * @interface CompanyApiUpdateCustomFieldsCategoryRequest
 */
export type CompanyApiUpdateCustomFieldsCategoryRequest = {
    
    /**
    * ID associated with desired company.
    * @type {string}
    * @memberof CompanyApiUpdateCustomFieldsCategory
    */
    readonly companyId: string
    
    /**
    * ID associated with desired custom field.
    * @type {string}
    * @memberof CompanyApiUpdateCustomFieldsCategory
    */
    readonly categoryid: string
    
} & CustomFieldsCategoryResource

/**
 * Request parameters for updateJob operation in CompanyApi.
 * @export
 * @interface CompanyApiUpdateJobRequest
 */
export type CompanyApiUpdateJobRequest = {
    /**
    * The ID of the company.
    * @type {string}
    * @memberof CompanyApiUpdateJob
    */
    readonly companyId: string
    /**
    * The ID of the job.
    * @type {string}
    * @memberof CompanyApiUpdateJob
    */
    readonly jobId: string
    /**
    * 
    * @type {JobResource}
    * @memberof CompanyApiUpdateJob
    */
    readonly requestBody: JobResource
}

/**
 * CompanyApiGenerated - object-oriented interface
 * @export
 * @class CompanyApiGenerated
 * @extends {BaseAPI}
 */
export class CompanyApiGenerated extends BaseAPI {
    /**
     * Add one or more workers to a specific company that your application has been granted access to. These workers will be added with an IN_PROGRESS status assigned to them.  In_Progress workers will pre-populated within Paychex Flex and will require someone to complete them to be fully available with the Flex platform.  Paychex Flex UI will hold a majority of validation, rules, and enforced required fields based on the clients configuration.  Required fields are givenName, familyName, & workerType (when adding multiple workers at a time you will need to also include a \"workerCorrelationId\" data element on each worker, that will be used as an identifier in our responses). Optionally you can include a workers communications object within the worker.  Once generated the IN_PROGRESS worker can have their communications, Compensation and Federal Taxes POSTed and PATCHed using the generated workerId.
     * @summary In Progress Workers
     * @param {CompanyApiAddInProgressWorkersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public addInProgressWorkers(requestParameters: CompanyApiAddInProgressWorkersRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).addInProgressWorkers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a company level job. If a client has their job numbering structured in 2-3 separate \'segments\', you may need to first do a GET on the jobsegements endpoint, so you can see how many segments and the character length of each segment, as well as the name of those segments, which you will need to have before you POST.
     * @summary Company Job
     * @param {CompanyApiAddJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public addJob(requestParameters: CompanyApiAddJobRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).addJob(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create CustomFields at the company level which a company could be assigned.
     * @summary Custom Field
     * @param {CompanyApiCreateCustomFieldAtCompanyLevelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public createCustomFieldAtCompanyLevel(requestParameters: CompanyApiCreateCustomFieldAtCompanyLevelRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).createCustomFieldAtCompanyLevel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create CustomFieldsCategory at the company level which a company could be assigned.
     * @summary Custom Fields Category
     * @param {CompanyApiCreateCustomFieldCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public createCustomFieldCategory(requestParameters: CompanyApiCreateCustomFieldCategoryRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).createCustomFieldCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete CustomField at the company level.
     * @summary Custom Field
     * @param {CompanyApiDeleteCustomFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public deleteCustomField(requestParameters: CompanyApiDeleteCustomFieldRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).deleteCustomField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete CustomFieldsCategory at the company level.
     * @summary Custom Fields Category
     * @param {CompanyApiDeleteCustomFieldsCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public deleteCustomFieldsCategory(requestParameters: CompanyApiDeleteCustomFieldsCategoryRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).deleteCustomFieldsCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Array of calculation bases that are used with a worker pay components that are not FLAT_DOLLAR_AMOUNT allow you to determine what to apply the calculation against when determining the amount during the pay run.
     * @summary Company Calculation Bases
     * @param {CompanyApiGetCalculationBasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getCalculationBases(requestParameters: CompanyApiGetCalculationBasesRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getCalculationBases(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Information about contact types that your application has been granted access to.
     * @summary Company Contact Types
     * @param {CompanyApiGetContactTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getContactTypes(requestParameters: CompanyApiGetContactTypesRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getContactTypes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Information about a single CustomField.
     * @summary Custom Field
     * @param {CompanyApiGetCustomFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getCustomField(requestParameters: CompanyApiGetCustomFieldRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getCustomField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Array of CustomFieldsCategories Configured at the company level 
     * @summary Custom Fields Categories
     * @param {CompanyApiGetCustomFieldCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getCustomFieldCategories(requestParameters: CompanyApiGetCustomFieldCategoriesRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getCustomFieldCategories(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Array of customFields Configured at the company level 
     * @summary Custom Fields
     * @param {CompanyApiGetCustomFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getCustomFields(requestParameters: CompanyApiGetCustomFieldsRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getCustomFields(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Information about a single CustomFieldsCategory.
     * @summary Custom Fields Category
     * @param {CompanyApiGetCustomFieldsCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getCustomFieldsCategory(requestParameters: CompanyApiGetCustomFieldsCategoryRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getCustomFieldsCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Information about a single company that your application has access to.
     * @summary A Company
     * @param {CompanyApiGetInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getInformation(requestParameters: CompanyApiGetInformationRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Information about a single Job.
     * @summary Company Job
     * @param {CompanyApiGetJobInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getJobInformation(requestParameters: CompanyApiGetJobInformationRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getJobInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve job segment structure setup for this client. This endpoint is only available if the client has their job numbering set up in \'2-3 separate \'segments\'.  The response will give you back the exact character lengths and the segment names so you are able to POST.
     * @summary Company Job Segments
     * @param {CompanyApiGetJobSegmentStructureSetupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getJobSegmentStructureSetup(requestParameters: CompanyApiGetJobSegmentStructureSetupRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getJobSegmentStructureSetup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Information about a single Job Title.
     * @summary Job Title
     * @param {CompanyApiGetJobTitleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getJobTitle(requestParameters: CompanyApiGetJobTitleRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getJobTitle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Array of jobs set at the company level.
     * @summary Company Jobs
     * @param {CompanyApiGetJobsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getJobs(requestParameters: CompanyApiGetJobsRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getJobs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Information about a single Labor Assignment.
     * @summary Company Labour Assignment
     * @param {CompanyApiGetLaborAssignmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getLaborAssignment(requestParameters: CompanyApiGetLaborAssignmentRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getLaborAssignment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Information about a single Location.
     * @summary Company Location
     * @param {CompanyApiGetLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getLocation(requestParameters: CompanyApiGetLocationRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getLocation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Array of locations set at the company level.
     * @summary Company Locations
     * @param {CompanyApiGetLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getLocations(requestParameters: CompanyApiGetLocationsRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getLocations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Information about a single Organization.
     * @summary Company Organization
     * @param {CompanyApiGetOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getOrganization(requestParameters: CompanyApiGetOrganizationRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getOrganization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Array of organizations set at the company level.
     * @summary Company Organizations
     * @param {CompanyApiGetOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getOrganizations(requestParameters: CompanyApiGetOrganizationsRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getOrganizations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Array of pay frequencies that workers maybe paid on. This is a generic array that is currently not specific to the companies pay frequency. This is to be used with the workers pay components to determine what the frequency, occurrence, and intervals are allowed.
     * @summary Company Pay Frequencies
     * @param {CompanyApiGetPayFrequenciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getPayFrequencies(requestParameters: CompanyApiGetPayFrequenciesRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getPayFrequencies(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Information about a single status.
     * @summary Company Worker Status
     * @param {CompanyApiGetStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getStatus(requestParameters: CompanyApiGetStatusRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Array of workers (employee and contractor) for all of the companies who are associated with a specific company that your application has been granted access to. The combination of query parameters to be used with this endpoint are as follows:  1. givenname, familyname, legallastfour  2. from, to (start date, end date)  3. employeeid  4. locationid  5. offset, limit (paging).  Note: Paging and filtering attributes cannot be applied together. 
     * @summary Company Workers
     * @param {CompanyApiGetWorkersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public getWorkers(requestParameters: CompanyApiGetWorkersRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).getWorkers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Array of companies that your application has been granted with some level of access. Your Application (API Key) can be granted access to one or more companies (clients) accounts that are associated with one or more product lines within Paychex.
     * @summary Companies
     * @param {CompanyApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public list(requestParameters: CompanyApiListRequest = {}, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Array of job titles set at the company level which a worker could be assigned.
     * @summary Company Job Titles
     * @param {CompanyApiListJobTitlesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public listJobTitles(requestParameters: CompanyApiListJobTitlesRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).listJobTitles(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Array of labor assignments set at the company level.
     * @summary Company Labour Assignments
     * @param {CompanyApiListLaborAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public listLaborAssignments(requestParameters: CompanyApiListLaborAssignmentsRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).listLaborAssignments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Array of statuses set at the company level which a worker could be assigned.
     * @summary Company Worker Statuses
     * @param {CompanyApiListWorkerStatusesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public listWorkerStatuses(requestParameters: CompanyApiListWorkerStatusesRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).listWorkerStatuses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update CustomFields at the company level which a company could be assigned.
     * @summary Custom Field
     * @param {CompanyApiUpdateCustomFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public updateCustomField(requestParameters: CompanyApiUpdateCustomFieldRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).updateCustomField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update  CustomFieldsCategory at the company level.
     * @summary Custom Fields Category
     * @param {CompanyApiUpdateCustomFieldsCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public updateCustomFieldsCategory(requestParameters: CompanyApiUpdateCustomFieldsCategoryRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).updateCustomFieldsCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a single Job.
     * @summary Company Job
     * @param {CompanyApiUpdateJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApiGenerated
     */
    public updateJob(requestParameters: CompanyApiUpdateJobRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).updateJob(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
