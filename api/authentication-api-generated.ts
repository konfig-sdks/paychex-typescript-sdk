/* tslint:disable */
/* eslint-disable */
/*
External API



# Developer Resources
 Refer
[Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Authentication } from '../models';
// @ts-ignore
import { AuthenticationCreateBearerTokenRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Request a Bearer token that will be used as an access token when making calls to resources.  The credentials need to be sent within the body of the request.
         * @summary Create Bearer token
         * @param {string} grantType Send \\\&quot;client_credentials\\\&quot;.
         * @param {string} clientId The applications API key.
         * @param {string} clientSecret The applications corresponding secret.
         * @param {AuthenticationCreateBearerTokenRequest} [authenticationCreateBearerTokenRequest] user info to be filled
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBearerToken: async (grantType: string, clientId: string, clientSecret: string, authenticationCreateBearerTokenRequest?: AuthenticationCreateBearerTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'grantType' is not null or undefined
            assertParamExists('createBearerToken', 'grantType', grantType)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('createBearerToken', 'clientId', clientId)
            // verify required parameter 'clientSecret' is not null or undefined
            assertParamExists('createBearerToken', 'clientSecret', clientSecret)
            const localVarPath = `/auth/oauth/v2/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


            if (grantType !== undefined) {
                await addFormParam('grant_type', grantType, false, true)
            }
    
            if (clientId !== undefined) {
                await addFormParam('client_id', clientId, false, true)
            }
    
            if (clientSecret !== undefined) {
                await addFormParam('client_secret', clientSecret, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: authenticationCreateBearerTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/auth/oauth/v2/token',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(authenticationCreateBearerTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Request a Bearer token that will be used as an access token when making calls to resources.  The credentials need to be sent within the body of the request.
         * @summary Create Bearer token
         * @param {AuthenticationApiCreateBearerTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBearerToken(requestParameters: AuthenticationApiCreateBearerTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Authentication>> {
            const authenticationCreateBearerTokenRequest: AuthenticationCreateBearerTokenRequest = {
                grant_type: requestParameters.grant_type,
                client_id: requestParameters.client_id,
                client_secret: requestParameters.client_secret
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBearerToken(requestParameters.grantType, requestParameters.clientId, requestParameters.clientSecret, authenticationCreateBearerTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Request a Bearer token that will be used as an access token when making calls to resources.  The credentials need to be sent within the body of the request.
         * @summary Create Bearer token
         * @param {AuthenticationApiCreateBearerTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBearerToken(requestParameters: AuthenticationApiCreateBearerTokenRequest, options?: AxiosRequestConfig): AxiosPromise<Authentication> {
            return localVarFp.createBearerToken(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBearerToken operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiCreateBearerTokenRequest
 */
export type AuthenticationApiCreateBearerTokenRequest = {
    
    /**
    * Send \\\"client_credentials\\\".
    * @type {string}
    * @memberof AuthenticationApiCreateBearerToken
    */
    readonly grantType: string
    
    /**
    * The applications API key.
    * @type {string}
    * @memberof AuthenticationApiCreateBearerToken
    */
    readonly clientId: string
    
    /**
    * The applications corresponding secret.
    * @type {string}
    * @memberof AuthenticationApiCreateBearerToken
    */
    readonly clientSecret: string
    
} & AuthenticationCreateBearerTokenRequest

/**
 * AuthenticationApiGenerated - object-oriented interface
 * @export
 * @class AuthenticationApiGenerated
 * @extends {BaseAPI}
 */
export class AuthenticationApiGenerated extends BaseAPI {
    /**
     * Request a Bearer token that will be used as an access token when making calls to resources.  The credentials need to be sent within the body of the request.
     * @summary Create Bearer token
     * @param {AuthenticationApiCreateBearerTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    public createBearerToken(requestParameters: AuthenticationApiCreateBearerTokenRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).createBearerToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
