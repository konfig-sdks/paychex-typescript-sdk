/* tslint:disable */
/* eslint-disable */
/*
External API



# Developer Resources
 Refer
[Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CollectionResource } from '../models';
// @ts-ignore
import { CommunicationResource1 } from '../models';
// @ts-ignore
import { ContactTypeResource1 } from '../models';
// @ts-ignore
import { DirectDepositResource } from '../models';
// @ts-ignore
import { ErrorResource } from '../models';
// @ts-ignore
import { JobTitleResource1 } from '../models';
// @ts-ignore
import { LegalIdResource1 } from '../models';
// @ts-ignore
import { Link } from '../models';
// @ts-ignore
import { NameResource1 } from '../models';
// @ts-ignore
import { OrganizationResource1 } from '../models';
// @ts-ignore
import { PayComponentFrequencyTypeResource1 } from '../models';
// @ts-ignore
import { PayRateResource } from '../models';
// @ts-ignore
import { PayRatesStandardResource } from '../models';
// @ts-ignore
import { PayStandardResource } from '../models';
// @ts-ignore
import { RecurringResource } from '../models';
// @ts-ignore
import { RelationshipResource } from '../models';
// @ts-ignore
import { Status1 } from '../models';
// @ts-ignore
import { SupervisorResource1 } from '../models';
// @ts-ignore
import { TimeOffResource } from '../models';
// @ts-ignore
import { WorkerAssignmentDistributionsResource } from '../models';
// @ts-ignore
import { WorkerContactResource } from '../models';
// @ts-ignore
import { WorkerCustomFieldsResource } from '../models';
// @ts-ignore
import { WorkerFederalTaxResource } from '../models';
// @ts-ignore
import { WorkerResource1 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WorkerApi - axios parameter creator
 * @export
 */
export const WorkerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a single communication to the \"Active\" or \"In-progress\" worker.
         * @summary Worker Communication
         * @param {string} workerId The id assigned to the worker that workers are being requested for.
         * @param {CommunicationResource1} communicationResource1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCommunication: async (workerId: string, communicationResource1: CommunicationResource1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('addCommunication', 'workerId', workerId)
            // verify required parameter 'communicationResource1' is not null or undefined
            assertParamExists('addCommunication', 'communicationResource1', communicationResource1)
            const localVarPath = `/workers/{workerId}/communications`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: communicationResource1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/communications',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(communicationResource1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a direct deposit to an \"Active\" worker.
         * @summary Worker Direct Deposit
         * @param {string} workerId ID associated with desired worker.
         * @param {DirectDepositResource} directDepositResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDirectDeposit: async (workerId: string, directDepositResource: DirectDepositResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('addDirectDeposit', 'workerId', workerId)
            // verify required parameter 'directDepositResource' is not null or undefined
            assertParamExists('addDirectDeposit', 'directDepositResource', directDepositResource)
            const localVarPath = `/workers/{workerId}/directdeposits`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: directDepositResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/directdeposits',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(directDepositResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add federal tax setup for a \"Active\" or \"In-progress\" worker.
         * @summary Worker Federal Tax
         * @param {string} workerId ID associated with desired worker.
         * @param {WorkerFederalTaxResource} workerFederalTaxResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFederalTaxSetup: async (workerId: string, workerFederalTaxResource: WorkerFederalTaxResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('addFederalTaxSetup', 'workerId', workerId)
            // verify required parameter 'workerFederalTaxResource' is not null or undefined
            assertParamExists('addFederalTaxSetup', 'workerFederalTaxResource', workerFederalTaxResource)
            const localVarPath = `/workers/{workerId}/federaltax`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workerFederalTaxResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/federaltax',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workerFederalTaxResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a single pay component to the \"Active\" worker. This pay component will be used for apply recurring pay components on a workers check based on the frequency specified. supports the ability to POST both Addition and Reduction type pay components.
         * @summary Worker Pay Component
         * @param {string} workerId ID associated with desired worker.
         * @param {RecurringResource} recurringResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPayComponent: async (workerId: string, recurringResource: RecurringResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('addPayComponent', 'workerId', workerId)
            // verify required parameter 'recurringResource' is not null or undefined
            assertParamExists('addPayComponent', 'recurringResource', recurringResource)
            const localVarPath = `/workers/{workerId}/paycomponents`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: recurringResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/paycomponents',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(recurringResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a single compensation rate to the \"Active\" or \"In-progress\" worker.
         * @summary Worker Pay Rate
         * @param {string} workerId ID associated with desired worker.
         * @param {PayRateResource} payRateResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPayRate: async (workerId: string, payRateResource: PayRateResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('addPayRate', 'workerId', workerId)
            // verify required parameter 'payRateResource' is not null or undefined
            assertParamExists('addPayRate', 'payRateResource', payRateResource)
            const localVarPath = `/workers/{workerId}/compensation/payrates`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payRateResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/compensation/payrates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payRateResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add one or more contacts to a worker. A contact may represent a person or entity (organization) but not both. A contact must have at least one communication (telecom, postal, or email). Person contacts can have multiple communications for each communication type (telecom, postal, or email) to support BUSINESS and PERSONAL. Exactly one contact must be marked as primary for each contact type. If one or more contacts are posted for the same contact type, and there are currently no contacts of that type for the worker, the first contact in the list will be made primary unless another in the list is expressly marked as primary. When a new contact is made primary the previous primary contact will be marked as not primary. Use the GET /companies/{companyId}/contacttypes endpoint to get a full list of available contact types and relationship types (used for person contacts).
         * @summary Worker Contacts
         * @param {string} workerId ID associated with desired worker.
         * @param {WorkerContactResource} workerContactResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWorkerContacts: async (workerId: string, workerContactResource: WorkerContactResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('addWorkerContacts', 'workerId', workerId)
            // verify required parameter 'workerContactResource' is not null or undefined
            assertParamExists('addWorkerContacts', 'workerContactResource', workerContactResource)
            const localVarPath = `/workers/{workerId}/contacts`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workerContactResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/contacts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workerContactResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create CustomField at the worker level
         * @summary Worker Custom Field
         * @param {string} workerId ID associated with desired worker.
         * @param {WorkerCustomFieldsResource} workerCustomFieldsResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomField: async (workerId: string, workerCustomFieldsResource: WorkerCustomFieldsResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('createCustomField', 'workerId', workerId)
            // verify required parameter 'workerCustomFieldsResource' is not null or undefined
            assertParamExists('createCustomField', 'workerCustomFieldsResource', workerCustomFieldsResource)
            const localVarPath = `/workers/{workerId}/customfields`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workerCustomFieldsResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/customfields',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workerCustomFieldsResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a worker contact by contactId.
         * @summary Worker Contact
         * @param {string} workerId ID associated with desired worker.
         * @param {string} contactId ID associated with desired worker contact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContactByContactId: async (workerId: string, contactId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('deleteContactByContactId', 'workerId', workerId)
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('deleteContactByContactId', 'contactId', contactId)
            const localVarPath = `/workers/{workerId}/contacts/{contactId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId !== undefined ? contactId : `-contactId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/contacts/{contactId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete CustomField at the worker level
         * @summary Worker Custom Field
         * @param {string} workerId ID associated with desired worker.
         * @param {string} workerCustomFieldId ID associated with desired worker custom field.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomField: async (workerId: string, workerCustomFieldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('deleteCustomField', 'workerId', workerId)
            // verify required parameter 'workerCustomFieldId' is not null or undefined
            assertParamExists('deleteCustomField', 'workerCustomFieldId', workerCustomFieldId)
            const localVarPath = `/workers/{workerId}/customfields/{workerCustomFieldId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"workerCustomFieldId"}}`, encodeURIComponent(String(workerCustomFieldId !== undefined ? workerCustomFieldId : `-workerCustomFieldId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/customfields/{workerCustomFieldId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete in progress Worker
         * @summary Worker
         * @param {string} workerId ID associated with desired worker.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInProgress: async (workerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('deleteInProgress', 'workerId', workerId)
            const localVarPath = `/workers/{workerId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A \"Active\" or \"In-progress\" workers single communication item.
         * @summary Worker Communication
         * @param {string} workerId The id assigned to the worker that workers are being requested for.
         * @param {string} communicationId The id of a single workers communication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommunicationItem: async (workerId: string, communicationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getCommunicationItem', 'workerId', workerId)
            // verify required parameter 'communicationId' is not null or undefined
            assertParamExists('getCommunicationItem', 'communicationId', communicationId)
            const localVarPath = `/workers/{workerId}/communications/{communicationId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"communicationId"}}`, encodeURIComponent(String(communicationId !== undefined ? communicationId : `-communicationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/communications/{communicationId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Information about \"Active\" or \"In-progress\"  workers communications.
         * @summary Worker Communications
         * @param {string} workerId The id assigned to the worker that workers are being requested for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommunications: async (workerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getCommunications', 'workerId', workerId)
            const localVarPath = `/workers/{workerId}/communications`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/communications',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Information about a workers compensation.
         * @summary Worker Compensation
         * @param {string} workerId ID associated with desired worker.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompensationInformation: async (workerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getCompensationInformation', 'workerId', workerId)
            const localVarPath = `/workers/{workerId}/compensation`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/compensation',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a worker contact by contactId.
         * @summary Worker Contact
         * @param {string} workerId ID associated with desired worker.
         * @param {string} contactId The id of a single Contact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactByContactId: async (workerId: string, contactId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getContactByContactId', 'workerId', workerId)
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('getContactByContactId', 'contactId', contactId)
            const localVarPath = `/workers/{workerId}/contacts/{contactId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId !== undefined ? contactId : `-contactId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/contacts/{contactId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all contacts for the specified worker.
         * @summary Worker Contacts
         * @param {string} workerId ID associated with desired worker.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContacts: async (workerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getContacts', 'workerId', workerId)
            const localVarPath = `/workers/{workerId}/contacts`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/contacts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the worker\'s customFields by workerCustomFieldId
         * @summary Worker Custom Field
         * @param {string} workerId ID associated with desired worker.
         * @param {string} workerCustomFieldId ID associated with desired worker custom field.
         * @param {string} [asof] Returns custom field as of the date used in the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomField: async (workerId: string, workerCustomFieldId: string, asof?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getCustomField', 'workerId', workerId)
            // verify required parameter 'workerCustomFieldId' is not null or undefined
            assertParamExists('getCustomField', 'workerCustomFieldId', workerCustomFieldId)
            const localVarPath = `/workers/{workerId}/customfields/{workerCustomFieldId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"workerCustomFieldId"}}`, encodeURIComponent(String(workerCustomFieldId !== undefined ? workerCustomFieldId : `-workerCustomFieldId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (asof !== undefined) {
                localVarQueryParameter['asof'] = asof;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/customfields/{workerCustomFieldId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the worker\'s customFields
         * @summary Worker Custom Fields
         * @param {string} workerId ID associated with desired worker.
         * @param {string} [asof] Returns all custom fields as of the date used in the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFields: async (workerId: string, asof?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getCustomFields', 'workerId', workerId)
            const localVarPath = `/workers/{workerId}/customfields`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (asof !== undefined) {
                localVarQueryParameter['asof'] = asof;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/customfields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Single direct deposit for an \"Active\" worker.
         * @summary Worker Direct Deposit
         * @param {string} workerId ID associated with desired worker.
         * @param {string} directDepositId The id assigned to the direct deposit for this worker.
         * @param {string} [effectivitydate] The effectivity date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDirectDeposit: async (workerId: string, directDepositId: string, effectivitydate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getDirectDeposit', 'workerId', workerId)
            // verify required parameter 'directDepositId' is not null or undefined
            assertParamExists('getDirectDeposit', 'directDepositId', directDepositId)
            const localVarPath = `/workers/{workerId}/directdeposits/{directDepositId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"directDepositId"}}`, encodeURIComponent(String(directDepositId !== undefined ? directDepositId : `-directDepositId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectivitydate !== undefined) {
                localVarQueryParameter['effectivitydate'] = effectivitydate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/directdeposits/{directDepositId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Federal tax setup for \"Active\" or \"In-progress\"  worker.
         * @summary Worker Federal Tax
         * @param {string} workerId ID associated with desired worker.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFederalTaxSetup: async (workerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getFederalTaxSetup', 'workerId', workerId)
            const localVarPath = `/workers/{workerId}/federaltax`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/federaltax',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Information about a unique worker (employee and contractor) that your application has been granted access to. Currently workers that exist within Paychex Flex payroll will be available, future enhancements will make workers from other Paychex systems available.
         * @summary Worker
         * @param {string} workerId ID associated with desired worker.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation: async (workerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getInformation', 'workerId', workerId)
            const localVarPath = `/workers/{workerId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific pay component that a \"Active\" worker has.
         * @summary Worker Pay Component
         * @param {string} workerId ID associated with desired worker.
         * @param {string} workerComponentId The id of a single pay component that a  \&quot;Active\&quot; worker has.
         * @param {string} [asof] Returns pay component as of the date used in the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayComponent: async (workerId: string, workerComponentId: string, asof?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getPayComponent', 'workerId', workerId)
            // verify required parameter 'workerComponentId' is not null or undefined
            assertParamExists('getPayComponent', 'workerComponentId', workerComponentId)
            const localVarPath = `/workers/{workerId}/paycomponents/{workerComponentId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"workerComponentId"}}`, encodeURIComponent(String(workerComponentId !== undefined ? workerComponentId : `-workerComponentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (asof !== undefined) {
                localVarQueryParameter['asof'] = asof;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/paycomponents/{workerComponentId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the the pay components for a specific \"Active\" worker.
         * @summary Worker Pay Components
         * @param {string} workerId ID associated with desired worker.
         * @param {string} [effectonpay] What the effect on pay will be (REDUCTION OR ADDITION), currently only reductions are available.
         * @param {string} [asof] Returns all pay components as of the date used in the request
         * @param {string} [name] The name of a pay component that a workers has.
         * @param {string} [componentid] The unique identifier of the pay component.
         * @param {string} [classificationtype] The classification type of a pay component that a worker has. (such as \&quot;DEDUCTION\&quot;, or \&quot;REGULAR\&quot;,)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayComponents: async (workerId: string, effectonpay?: string, asof?: string, name?: string, componentid?: string, classificationtype?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getPayComponents', 'workerId', workerId)
            const localVarPath = `/workers/{workerId}/paycomponents`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectonpay !== undefined) {
                localVarQueryParameter['effectonpay'] = effectonpay;
            }

            if (asof !== undefined) {
                localVarQueryParameter['asof'] = asof;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (componentid !== undefined) {
                localVarQueryParameter['componentid'] = componentid;
            }

            if (classificationtype !== undefined) {
                localVarQueryParameter['classificationtype'] = classificationtype;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/paycomponents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A workers single compensation rate.
         * @summary Worker Pay Rate
         * @param {string} workerId ID associated with desired worker.
         * @param {string} rateId The id of a single workers compensation rate.
         * @param {string} [asof] Returns compensation as of the date used in the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayRate: async (workerId: string, rateId: string, asof?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getPayRate', 'workerId', workerId)
            // verify required parameter 'rateId' is not null or undefined
            assertParamExists('getPayRate', 'rateId', rateId)
            const localVarPath = `/workers/{workerId}/compensation/payrates/{rateId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"rateId"}}`, encodeURIComponent(String(rateId !== undefined ? rateId : `-rateId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (asof !== undefined) {
                localVarQueryParameter['asof'] = asof;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/compensation/payrates/{rateId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Information about a workers compensation rates. Rate one is only one available if the worker is In-Progress. The multiple rates is available for workers that have been completed within Flex. It’s not required for a worker to have a rate in the system.
         * @summary Worker Pay Rates
         * @param {string} workerId ID associated with desired worker.
         * @param {string} [asof] Returns all pay rates as of the date used in the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayRatesByWorkerId: async (workerId: string, asof?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getPayRatesByWorkerId', 'workerId', workerId)
            const localVarPath = `/workers/{workerId}/compensation/payrates`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (asof !== undefined) {
                localVarQueryParameter['asof'] = asof;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/compensation/payrates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Information about a workers compensation pay standards.
         * @summary Worker Pay Standards
         * @param {string} workerId ID associated with desired worker.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayStandards: async (workerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getPayStandards', 'workerId', workerId)
            const localVarPath = `/workers/{workerId}/compensation/paystandards`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/compensation/paystandards',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Array of time off balance(s) a worker has for each policy type of time off, for that worker. NOTE: This data is only available if the client has the Time Off Accrual product (This is not related to the Flex Time product which has it is own dev portal for those APIs).
         * @summary Worker Time Off
         * @param {string} workerId The ID of the worker.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeOffBalance: async (workerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getTimeOffBalance', 'workerId', workerId)
            const localVarPath = `/workers/{workerId}/timeoff`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/timeoff',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the full list of worker statuses (past, present, and future). For each status the workerStatusId is the value of the corresponding company worker status ID. If no company worker status with a matching type/reason exists then workerStatusId is omitted. If multiple statuses share an effective date the order field will indicate the order in which they were posted.
         * @summary Worker Statuses
         * @param {string} workerId ID associated with desired worker.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkerStatusList: async (workerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getWorkerStatusList', 'workerId', workerId)
            const localVarPath = `/workers/{workerId}/status`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/status',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Array of assignments that will be used for auto distribution assigned to the worker.
         * @summary Worker Assignments
         * @param {string} workerId The ID of the worker.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssignmentDistributions: async (workerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('listAssignmentDistributions', 'workerId', workerId)
            const localVarPath = `/workers/{workerId}/assignmentdistributions`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/assignmentdistributions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Array of direct deposits on the \"Active\" worker.
         * @summary Worker Direct Deposits
         * @param {string} workerId ID associated with desired worker.
         * @param {string} [effectivitydate] The effectivity date
         * @param {string} [asof] Returns all direct deposits as of the date used in the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDirectDeposits: async (workerId: string, effectivitydate?: string, asof?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('listDirectDeposits', 'workerId', workerId)
            const localVarPath = `/workers/{workerId}/directdeposits`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectivitydate !== undefined) {
                localVarQueryParameter['effectivitydate'] = effectivitydate;
            }

            if (asof !== undefined) {
                localVarQueryParameter['asof'] = asof;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/directdeposits',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a communication item from a \"Active\" or \"In-progress\" worker.
         * @summary Worker Communication
         * @param {string} workerId The id assigned to the worker that workers are being requested for.
         * @param {string} communicationId The id of a single workers communication.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCommunication: async (workerId: string, communicationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('removeCommunication', 'workerId', workerId)
            // verify required parameter 'communicationId' is not null or undefined
            assertParamExists('removeCommunication', 'communicationId', communicationId)
            const localVarPath = `/workers/{workerId}/communications/{communicationId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"communicationId"}}`, encodeURIComponent(String(communicationId !== undefined ? communicationId : `-communicationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/communications/{communicationId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a single direct deposit for a \"Active\" worker.
         * @summary Worker Direct Deposit
         * @param {string} workerId ID associated with desired worker.
         * @param {string} directDepositId The id assigned to the direct deposit for this worker.
         * @param {string} [effectivitydate] The effectivity date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDirectDeposit: async (workerId: string, directDepositId: string, effectivitydate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('removeDirectDeposit', 'workerId', workerId)
            // verify required parameter 'directDepositId' is not null or undefined
            assertParamExists('removeDirectDeposit', 'directDepositId', directDepositId)
            const localVarPath = `/workers/{workerId}/directdeposits/{directDepositId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"directDepositId"}}`, encodeURIComponent(String(directDepositId !== undefined ? directDepositId : `-directDepositId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectivitydate !== undefined) {
                localVarQueryParameter['effectivitydate'] = effectivitydate;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/directdeposits/{directDepositId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the federal tax setup for an \"In-progress\" worker.
         * @summary Worker Federal Tax
         * @param {string} workerId ID associated with desired worker.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFederalTax: async (workerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('removeFederalTax', 'workerId', workerId)
            const localVarPath = `/workers/{workerId}/federaltax`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/federaltax',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a specific pay component that a \"Active\" worker has.
         * @summary Worker Pay Component
         * @param {string} workerId ID associated with desired worker.
         * @param {string} workerComponentId The id of a single pay component that a workers has.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePayComponent: async (workerId: string, workerComponentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('removePayComponent', 'workerId', workerId)
            // verify required parameter 'workerComponentId' is not null or undefined
            assertParamExists('removePayComponent', 'workerComponentId', workerComponentId)
            const localVarPath = `/workers/{workerId}/paycomponents/{workerComponentId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"workerComponentId"}}`, encodeURIComponent(String(workerComponentId !== undefined ? workerComponentId : `-workerComponentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/paycomponents/{workerComponentId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a compensation rate from a worker.
         * @summary Worker Pay Rate
         * @param {string} workerId ID associated with desired worker.
         * @param {string} rateId The id of a single workers compensation rate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePayRate: async (workerId: string, rateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('removePayRate', 'workerId', workerId)
            // verify required parameter 'rateId' is not null or undefined
            assertParamExists('removePayRate', 'rateId', rateId)
            const localVarPath = `/workers/{workerId}/compensation/payrates/{rateId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"rateId"}}`, encodeURIComponent(String(rateId !== undefined ? rateId : `-rateId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/compensation/payrates/{rateId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a \"Active\" or \"In-progress\" workers specific communication item.
         * @summary Worker Communication
         * @param {string} workerId The id assigned to the worker that workers are being requested for.
         * @param {string} communicationId The id of a single workers communication.
         * @param {CommunicationResource1} communicationResource1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCommunicationItem: async (workerId: string, communicationId: string, communicationResource1: CommunicationResource1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('updateCommunicationItem', 'workerId', workerId)
            // verify required parameter 'communicationId' is not null or undefined
            assertParamExists('updateCommunicationItem', 'communicationId', communicationId)
            // verify required parameter 'communicationResource1' is not null or undefined
            assertParamExists('updateCommunicationItem', 'communicationResource1', communicationResource1)
            const localVarPath = `/workers/{workerId}/communications/{communicationId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"communicationId"}}`, encodeURIComponent(String(communicationId !== undefined ? communicationId : `-communicationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: communicationResource1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/communications/{communicationId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(communicationResource1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a workers specific compensation rate.
         * @summary Worker Pay Rate
         * @param {string} workerId ID associated with desired worker.
         * @param {string} rateId The id of a single workers compensation rate.
         * @param {PayRateResource} payRateResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompensationRate: async (workerId: string, rateId: string, payRateResource: PayRateResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('updateCompensationRate', 'workerId', workerId)
            // verify required parameter 'rateId' is not null or undefined
            assertParamExists('updateCompensationRate', 'rateId', rateId)
            // verify required parameter 'payRateResource' is not null or undefined
            assertParamExists('updateCompensationRate', 'payRateResource', payRateResource)
            const localVarPath = `/workers/{workerId}/compensation/payrates/{rateId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"rateId"}}`, encodeURIComponent(String(rateId !== undefined ? rateId : `-rateId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payRateResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/compensation/payrates/{rateId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payRateResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a worker contact. A contact may represent a person or entity (organization) but not both. A contact must have at least one communication (telecom, postal, or email). Person contacts can have multiple communications for each communication type (telecom, postal, or email) to support BUSINESS and PERSONAL. Exactly one contact must be marked as primary for each contact type. When a new contact is made primary the previous primary contact will be marked as not primary. A postal contact can be switched from a street address to a PO box and vice versa. This is done by setting either streetLineOne or postOfficeBox (a postal communication may not have both). Use the GET /companies/{companyId}/contacttypes endpoint to get a full list of available contact types and relationship types (used for person contacts).
         * @summary Worker Contacts
         * @param {string} workerId ID associated with desired worker.
         * @param {string} contactId ID associated with desired worker contact.
         * @param {WorkerContactResource} workerContactResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContact: async (workerId: string, contactId: string, workerContactResource: WorkerContactResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('updateContact', 'workerId', workerId)
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('updateContact', 'contactId', contactId)
            // verify required parameter 'workerContactResource' is not null or undefined
            assertParamExists('updateContact', 'workerContactResource', workerContactResource)
            const localVarPath = `/workers/{workerId}/contacts/{contactId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId !== undefined ? contactId : `-contactId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workerContactResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/contacts/{contactId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workerContactResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update CustomField at the worker level
         * @summary Worker CustomField
         * @param {string} workerId ID associated with desired worker.
         * @param {string} workerCustomFieldId ID associated with desired worker custom field.
         * @param {WorkerCustomFieldsResource} workerCustomFieldsResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomField: async (workerId: string, workerCustomFieldId: string, workerCustomFieldsResource: WorkerCustomFieldsResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('updateCustomField', 'workerId', workerId)
            // verify required parameter 'workerCustomFieldId' is not null or undefined
            assertParamExists('updateCustomField', 'workerCustomFieldId', workerCustomFieldId)
            // verify required parameter 'workerCustomFieldsResource' is not null or undefined
            assertParamExists('updateCustomField', 'workerCustomFieldsResource', workerCustomFieldsResource)
            const localVarPath = `/workers/{workerId}/customfields/{workerCustomFieldId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"workerCustomFieldId"}}`, encodeURIComponent(String(workerCustomFieldId !== undefined ? workerCustomFieldId : `-workerCustomFieldId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workerCustomFieldsResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/customfields/{workerCustomFieldId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workerCustomFieldsResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a single direct deposit for a an \"Active\" worker.
         * @summary Worker Direct Deposit
         * @param {string} workerId ID associated with desired worker.
         * @param {string} directDepositId The id assigned to the direct deposit for this worker.
         * @param {DirectDepositResource} directDepositResource 
         * @param {string} [effectivitydate] The effectivity date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDirectDeposit: async (workerId: string, directDepositId: string, directDepositResource: DirectDepositResource, effectivitydate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('updateDirectDeposit', 'workerId', workerId)
            // verify required parameter 'directDepositId' is not null or undefined
            assertParamExists('updateDirectDeposit', 'directDepositId', directDepositId)
            // verify required parameter 'directDepositResource' is not null or undefined
            assertParamExists('updateDirectDeposit', 'directDepositResource', directDepositResource)
            const localVarPath = `/workers/{workerId}/directdeposits/{directDepositId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"directDepositId"}}`, encodeURIComponent(String(directDepositId !== undefined ? directDepositId : `-directDepositId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectivitydate !== undefined) {
                localVarQueryParameter['effectivitydate'] = effectivitydate;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: directDepositResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/directdeposits/{directDepositId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(directDepositResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update multiple direct deposits of an \"Active\" Worker at a time.
         * @summary Worker Direct Deposits
         * @param {string} workerId ID associated with desired worker.
         * @param {DirectDepositResource} directDepositResource 
         * @param {string} [effectivitydate] The effectivity date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDirectDeposits: async (workerId: string, directDepositResource: DirectDepositResource, effectivitydate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('updateDirectDeposits', 'workerId', workerId)
            // verify required parameter 'directDepositResource' is not null or undefined
            assertParamExists('updateDirectDeposits', 'directDepositResource', directDepositResource)
            const localVarPath = `/workers/{workerId}/directdeposits`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectivitydate !== undefined) {
                localVarQueryParameter['effectivitydate'] = effectivitydate;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: directDepositResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/directdeposits',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(directDepositResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the federal tax setup for a \"Active\" or \"In-progress\" worker.
         * @summary Worker Federal Tax
         * @param {string} workerId ID associated with desired worker.
         * @param {WorkerFederalTaxResource} workerFederalTaxResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFederalTaxSetup: async (workerId: string, workerFederalTaxResource: WorkerFederalTaxResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('updateFederalTaxSetup', 'workerId', workerId)
            // verify required parameter 'workerFederalTaxResource' is not null or undefined
            assertParamExists('updateFederalTaxSetup', 'workerFederalTaxResource', workerFederalTaxResource)
            const localVarPath = `/workers/{workerId}/federaltax`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workerFederalTaxResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/federaltax',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workerFederalTaxResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Update a single pay component associated to the \"Active\" worker.
         * @summary Worker Pay Component
         * @param {string} workerId ID associated with desired worker.
         * @param {string} workerComponentId The id of a single pay component that a workers has.
         * @param {RecurringResource} recurringResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayComponent: async (workerId: string, workerComponentId: string, recurringResource: RecurringResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('updatePayComponent', 'workerId', workerId)
            // verify required parameter 'workerComponentId' is not null or undefined
            assertParamExists('updatePayComponent', 'workerComponentId', workerComponentId)
            // verify required parameter 'recurringResource' is not null or undefined
            assertParamExists('updatePayComponent', 'recurringResource', recurringResource)
            const localVarPath = `/workers/{workerId}/paycomponents/{workerComponentId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"workerComponentId"}}`, encodeURIComponent(String(workerComponentId !== undefined ? workerComponentId : `-workerComponentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: recurringResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/paycomponents/{workerComponentId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(recurringResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Batch update pay components associated to the \"Active\" worker.
         * @summary Worker Pay Components
         * @param {string} workerId ID associated with desired worker.
         * @param {RecurringResource} recurringResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayComponents: async (workerId: string, recurringResource: RecurringResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('updatePayComponents', 'workerId', workerId)
            // verify required parameter 'recurringResource' is not null or undefined
            assertParamExists('updatePayComponents', 'recurringResource', recurringResource)
            const localVarPath = `/workers/{workerId}/paycomponents`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: recurringResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/paycomponents',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(recurringResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a unique worker (employee and contractor) that your application has been granted access to modify.
         * @summary Worker
         * @param {string} workerId ID associated with desired worker.
         * @param {WorkerResource1} workerResource1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUniqueWorker: async (workerId: string, workerResource1: WorkerResource1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('updateUniqueWorker', 'workerId', workerId)
            // verify required parameter 'workerResource1' is not null or undefined
            assertParamExists('updateUniqueWorker', 'workerResource1', workerResource1)
            const localVarPath = `/workers/{workerId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workerResource1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workerResource1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkerApi - functional programming interface
 * @export
 */
export const WorkerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkerApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a single communication to the \"Active\" or \"In-progress\" worker.
         * @summary Worker Communication
         * @param {WorkerApiAddCommunicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCommunication(requestParameters: WorkerApiAddCommunicationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommunicationResource1>> {
            const communicationResource1: CommunicationResource1 = {
                communicationId: requestParameters.communicationId,
                type: requestParameters.type,
                usageType: requestParameters.usageType,
                dialCountry: requestParameters.dialCountry,
                dialArea: requestParameters.dialArea,
                dialNumber: requestParameters.dialNumber,
                dialExtension: requestParameters.dialExtension,
                uri: requestParameters.uri,
                streetLineOne: requestParameters.streetLineOne,
                streetLineTwo: requestParameters.streetLineTwo,
                postOfficeBox: requestParameters.postOfficeBox,
                city: requestParameters.city,
                postalCode: requestParameters.postalCode,
                postalCodeExtension: requestParameters.postalCodeExtension,
                countrySubdivisionCode: requestParameters.countrySubdivisionCode,
                countryCode: requestParameters.countryCode,
                links: requestParameters.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCommunication(requestParameters.workerId, communicationResource1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a direct deposit to an \"Active\" worker.
         * @summary Worker Direct Deposit
         * @param {WorkerApiAddDirectDepositRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDirectDeposit(requestParameters: WorkerApiAddDirectDepositRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DirectDepositResource>> {
            const directDepositResource: DirectDepositResource = {
                directDepositId: requestParameters.directDepositId,
                startDate: requestParameters.startDate,
                paymentType: requestParameters.paymentType,
                accountType: requestParameters.accountType,
                value: requestParameters.value,
                routingNumber: requestParameters.routingNumber,
                accountNumber: requestParameters.accountNumber,
                priority: requestParameters.priority,
                links: requestParameters.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDirectDeposit(requestParameters.workerId, directDepositResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add federal tax setup for a \"Active\" or \"In-progress\" worker.
         * @summary Worker Federal Tax
         * @param {WorkerApiAddFederalTaxSetupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFederalTaxSetup(requestParameters: WorkerApiAddFederalTaxSetupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerFederalTaxResource>> {
            const workerFederalTaxResource: WorkerFederalTaxResource = {
                taxId: requestParameters.taxId,
                filingStatus: requestParameters.filingStatus,
                multipleJobs: requestParameters.multipleJobs,
                dependentsAmount: requestParameters.dependentsAmount,
                otherIncome: requestParameters.otherIncome,
                deductionsAmount: requestParameters.deductionsAmount,
                extraWithholdingAmount: requestParameters.extraWithholdingAmount,
                taxesWithheld: requestParameters.taxesWithheld
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFederalTaxSetup(requestParameters.workerId, workerFederalTaxResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a single pay component to the \"Active\" worker. This pay component will be used for apply recurring pay components on a workers check based on the frequency specified. supports the ability to POST both Addition and Reduction type pay components.
         * @summary Worker Pay Component
         * @param {WorkerApiAddPayComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPayComponent(requestParameters: WorkerApiAddPayComponentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecurringResource>> {
            const recurringResource: RecurringResource = {
                workerComponentId: requestParameters.workerComponentId,
                componentId: requestParameters.componentId,
                name: requestParameters.name,
                calculationType: requestParameters.calculationType,
                calculationBaseId: requestParameters.calculationBaseId,
                value: requestParameters.value,
                startDate: requestParameters.startDate,
                effectiveDate: requestParameters.effectiveDate,
                endDate: requestParameters.endDate,
                effectOnPay: requestParameters.effectOnPay,
                classificationType: requestParameters.classificationType,
                frequency: requestParameters.frequency,
                links: requestParameters.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPayComponent(requestParameters.workerId, recurringResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a single compensation rate to the \"Active\" or \"In-progress\" worker.
         * @summary Worker Pay Rate
         * @param {WorkerApiAddPayRateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPayRate(requestParameters: WorkerApiAddPayRateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayRateResource>> {
            const payRateResource: PayRateResource = {
                description: requestParameters.description,
                rateId: requestParameters.rateId,
                startDate: requestParameters.startDate,
                rateNumber: requestParameters.rateNumber,
                rateType: requestParameters.rateType,
                amount: requestParameters.amount,
                standardHours: requestParameters.standardHours,
                standardOvertime: requestParameters.standardOvertime,
                default: requestParameters.default,
                effectiveDate: requestParameters.effectiveDate,
                links: requestParameters.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPayRate(requestParameters.workerId, payRateResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add one or more contacts to a worker. A contact may represent a person or entity (organization) but not both. A contact must have at least one communication (telecom, postal, or email). Person contacts can have multiple communications for each communication type (telecom, postal, or email) to support BUSINESS and PERSONAL. Exactly one contact must be marked as primary for each contact type. If one or more contacts are posted for the same contact type, and there are currently no contacts of that type for the worker, the first contact in the list will be made primary unless another in the list is expressly marked as primary. When a new contact is made primary the previous primary contact will be marked as not primary. Use the GET /companies/{companyId}/contacttypes endpoint to get a full list of available contact types and relationship types (used for person contacts).
         * @summary Worker Contacts
         * @param {WorkerApiAddWorkerContactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addWorkerContacts(requestParameters: WorkerApiAddWorkerContactsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerContactResource>> {
            const workerContactResource: WorkerContactResource = {
                contactId: requestParameters.contactId,
                contactType: requestParameters.contactType,
                relationship: requestParameters.relationship
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addWorkerContacts(requestParameters.workerId, workerContactResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create CustomField at the worker level
         * @summary Worker Custom Field
         * @param {WorkerApiCreateCustomFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomField(requestParameters: WorkerApiCreateCustomFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerCustomFieldsResource>> {
            const workerCustomFieldsResource: WorkerCustomFieldsResource = {
                workerCustomFieldId: requestParameters.workerCustomFieldId,
                customFieldId: requestParameters.customFieldId,
                type: requestParameters.type,
                booleanValue: requestParameters.booleanValue,
                textValue: requestParameters.textValue,
                numericValue: requestParameters.numericValue,
                dateValue: requestParameters.dateValue,
                dropdownId: requestParameters.dropdownId,
                dropdownValue: requestParameters.dropdownValue,
                customFieldName: requestParameters.customFieldName,
                required: requestParameters.required,
                checkStub: requestParameters.checkStub,
                employeeEditable: requestParameters.employeeEditable
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomField(requestParameters.workerId, workerCustomFieldsResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a worker contact by contactId.
         * @summary Worker Contact
         * @param {WorkerApiDeleteContactByContactIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContactByContactId(requestParameters: WorkerApiDeleteContactByContactIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContactByContactId(requestParameters.workerId, requestParameters.contactId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete CustomField at the worker level
         * @summary Worker Custom Field
         * @param {WorkerApiDeleteCustomFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomField(requestParameters: WorkerApiDeleteCustomFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomField(requestParameters.workerId, requestParameters.workerCustomFieldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete in progress Worker
         * @summary Worker
         * @param {WorkerApiDeleteInProgressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInProgress(requestParameters: WorkerApiDeleteInProgressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInProgress(requestParameters.workerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A \"Active\" or \"In-progress\" workers single communication item.
         * @summary Worker Communication
         * @param {WorkerApiGetCommunicationItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommunicationItem(requestParameters: WorkerApiGetCommunicationItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommunicationResource1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommunicationItem(requestParameters.workerId, requestParameters.communicationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Information about \"Active\" or \"In-progress\"  workers communications.
         * @summary Worker Communications
         * @param {WorkerApiGetCommunicationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommunications(requestParameters: WorkerApiGetCommunicationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommunicationResource1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommunications(requestParameters.workerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Information about a workers compensation.
         * @summary Worker Compensation
         * @param {WorkerApiGetCompensationInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompensationInformation(requestParameters: WorkerApiGetCompensationInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompensationInformation(requestParameters.workerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a worker contact by contactId.
         * @summary Worker Contact
         * @param {WorkerApiGetContactByContactIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContactByContactId(requestParameters: WorkerApiGetContactByContactIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerContactResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContactByContactId(requestParameters.workerId, requestParameters.contactId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all contacts for the specified worker.
         * @summary Worker Contacts
         * @param {WorkerApiGetContactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContacts(requestParameters: WorkerApiGetContactsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerContactResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContacts(requestParameters.workerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the worker\'s customFields by workerCustomFieldId
         * @summary Worker Custom Field
         * @param {WorkerApiGetCustomFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomField(requestParameters: WorkerApiGetCustomFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerCustomFieldsResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomField(requestParameters.workerId, requestParameters.workerCustomFieldId, requestParameters.asof, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the worker\'s customFields
         * @summary Worker Custom Fields
         * @param {WorkerApiGetCustomFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomFields(requestParameters: WorkerApiGetCustomFieldsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerCustomFieldsResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomFields(requestParameters.workerId, requestParameters.asof, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Single direct deposit for an \"Active\" worker.
         * @summary Worker Direct Deposit
         * @param {WorkerApiGetDirectDepositRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDirectDeposit(requestParameters: WorkerApiGetDirectDepositRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DirectDepositResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDirectDeposit(requestParameters.workerId, requestParameters.directDepositId, requestParameters.effectivitydate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Federal tax setup for \"Active\" or \"In-progress\"  worker.
         * @summary Worker Federal Tax
         * @param {WorkerApiGetFederalTaxSetupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFederalTaxSetup(requestParameters: WorkerApiGetFederalTaxSetupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerFederalTaxResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFederalTaxSetup(requestParameters.workerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Information about a unique worker (employee and contractor) that your application has been granted access to. Currently workers that exist within Paychex Flex payroll will be available, future enhancements will make workers from other Paychex systems available.
         * @summary Worker
         * @param {WorkerApiGetInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInformation(requestParameters: WorkerApiGetInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerResource1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInformation(requestParameters.workerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a specific pay component that a \"Active\" worker has.
         * @summary Worker Pay Component
         * @param {WorkerApiGetPayComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayComponent(requestParameters: WorkerApiGetPayComponentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecurringResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayComponent(requestParameters.workerId, requestParameters.workerComponentId, requestParameters.asof, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all the the pay components for a specific \"Active\" worker.
         * @summary Worker Pay Components
         * @param {WorkerApiGetPayComponentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayComponents(requestParameters: WorkerApiGetPayComponentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecurringResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayComponents(requestParameters.workerId, requestParameters.effectonpay, requestParameters.asof, requestParameters.name, requestParameters.componentid, requestParameters.classificationtype, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A workers single compensation rate.
         * @summary Worker Pay Rate
         * @param {WorkerApiGetPayRateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayRate(requestParameters: WorkerApiGetPayRateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayRateResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayRate(requestParameters.workerId, requestParameters.rateId, requestParameters.asof, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Information about a workers compensation rates. Rate one is only one available if the worker is In-Progress. The multiple rates is available for workers that have been completed within Flex. It’s not required for a worker to have a rate in the system.
         * @summary Worker Pay Rates
         * @param {WorkerApiGetPayRatesByWorkerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayRatesByWorkerId(requestParameters: WorkerApiGetPayRatesByWorkerIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayRateResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayRatesByWorkerId(requestParameters.workerId, requestParameters.asof, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Information about a workers compensation pay standards.
         * @summary Worker Pay Standards
         * @param {WorkerApiGetPayStandardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayStandards(requestParameters: WorkerApiGetPayStandardsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayStandardResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayStandards(requestParameters.workerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Array of time off balance(s) a worker has for each policy type of time off, for that worker. NOTE: This data is only available if the client has the Time Off Accrual product (This is not related to the Flex Time product which has it is own dev portal for those APIs).
         * @summary Worker Time Off
         * @param {WorkerApiGetTimeOffBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeOffBalance(requestParameters: WorkerApiGetTimeOffBalanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeOffBalance(requestParameters.workerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the full list of worker statuses (past, present, and future). For each status the workerStatusId is the value of the corresponding company worker status ID. If no company worker status with a matching type/reason exists then workerStatusId is omitted. If multiple statuses share an effective date the order field will indicate the order in which they were posted.
         * @summary Worker Statuses
         * @param {WorkerApiGetWorkerStatusListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkerStatusList(requestParameters: WorkerApiGetWorkerStatusListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkerStatusList(requestParameters.workerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Array of assignments that will be used for auto distribution assigned to the worker.
         * @summary Worker Assignments
         * @param {WorkerApiListAssignmentDistributionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssignmentDistributions(requestParameters: WorkerApiListAssignmentDistributionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerAssignmentDistributionsResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssignmentDistributions(requestParameters.workerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Array of direct deposits on the \"Active\" worker.
         * @summary Worker Direct Deposits
         * @param {WorkerApiListDirectDepositsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDirectDeposits(requestParameters: WorkerApiListDirectDepositsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DirectDepositResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDirectDeposits(requestParameters.workerId, requestParameters.effectivitydate, requestParameters.asof, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a communication item from a \"Active\" or \"In-progress\" worker.
         * @summary Worker Communication
         * @param {WorkerApiRemoveCommunicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCommunication(requestParameters: WorkerApiRemoveCommunicationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommunicationResource1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeCommunication(requestParameters.workerId, requestParameters.communicationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a single direct deposit for a \"Active\" worker.
         * @summary Worker Direct Deposit
         * @param {WorkerApiRemoveDirectDepositRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeDirectDeposit(requestParameters: WorkerApiRemoveDirectDepositRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeDirectDeposit(requestParameters.workerId, requestParameters.directDepositId, requestParameters.effectivitydate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the federal tax setup for an \"In-progress\" worker.
         * @summary Worker Federal Tax
         * @param {WorkerApiRemoveFederalTaxRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFederalTax(requestParameters: WorkerApiRemoveFederalTaxRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFederalTax(requestParameters.workerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a specific pay component that a \"Active\" worker has.
         * @summary Worker Pay Component
         * @param {WorkerApiRemovePayComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePayComponent(requestParameters: WorkerApiRemovePayComponentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePayComponent(requestParameters.workerId, requestParameters.workerComponentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a compensation rate from a worker.
         * @summary Worker Pay Rate
         * @param {WorkerApiRemovePayRateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePayRate(requestParameters: WorkerApiRemovePayRateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePayRate(requestParameters.workerId, requestParameters.rateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a \"Active\" or \"In-progress\" workers specific communication item.
         * @summary Worker Communication
         * @param {WorkerApiUpdateCommunicationItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCommunicationItem(requestParameters: WorkerApiUpdateCommunicationItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommunicationResource1>> {
            const communicationResource1: CommunicationResource1 = {
                communicationId: requestParameters.requestBody.communicationId,
                type: requestParameters.requestBody.type,
                usageType: requestParameters.requestBody.usageType,
                dialCountry: requestParameters.requestBody.dialCountry,
                dialArea: requestParameters.requestBody.dialArea,
                dialNumber: requestParameters.requestBody.dialNumber,
                dialExtension: requestParameters.requestBody.dialExtension,
                uri: requestParameters.requestBody.uri,
                streetLineOne: requestParameters.requestBody.streetLineOne,
                streetLineTwo: requestParameters.requestBody.streetLineTwo,
                postOfficeBox: requestParameters.requestBody.postOfficeBox,
                city: requestParameters.requestBody.city,
                postalCode: requestParameters.requestBody.postalCode,
                postalCodeExtension: requestParameters.requestBody.postalCodeExtension,
                countrySubdivisionCode: requestParameters.requestBody.countrySubdivisionCode,
                countryCode: requestParameters.requestBody.countryCode,
                links: requestParameters.requestBody.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCommunicationItem(requestParameters.workerId, requestParameters.communicationId, communicationResource1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a workers specific compensation rate.
         * @summary Worker Pay Rate
         * @param {WorkerApiUpdateCompensationRateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCompensationRate(requestParameters: WorkerApiUpdateCompensationRateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayRateResource>> {
            const payRateResource: PayRateResource = {
                description: requestParameters.requestBody.description,
                rateId: requestParameters.requestBody.rateId,
                startDate: requestParameters.requestBody.startDate,
                rateNumber: requestParameters.requestBody.rateNumber,
                rateType: requestParameters.requestBody.rateType,
                amount: requestParameters.requestBody.amount,
                standardHours: requestParameters.requestBody.standardHours,
                standardOvertime: requestParameters.requestBody.standardOvertime,
                default: requestParameters.requestBody.default,
                effectiveDate: requestParameters.requestBody.effectiveDate,
                links: requestParameters.requestBody.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCompensationRate(requestParameters.workerId, requestParameters.rateId, payRateResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a worker contact. A contact may represent a person or entity (organization) but not both. A contact must have at least one communication (telecom, postal, or email). Person contacts can have multiple communications for each communication type (telecom, postal, or email) to support BUSINESS and PERSONAL. Exactly one contact must be marked as primary for each contact type. When a new contact is made primary the previous primary contact will be marked as not primary. A postal contact can be switched from a street address to a PO box and vice versa. This is done by setting either streetLineOne or postOfficeBox (a postal communication may not have both). Use the GET /companies/{companyId}/contacttypes endpoint to get a full list of available contact types and relationship types (used for person contacts).
         * @summary Worker Contacts
         * @param {WorkerApiUpdateContactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContact(requestParameters: WorkerApiUpdateContactRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerContactResource>> {
            const workerContactResource: WorkerContactResource = {
                contactId: requestParameters.requestBody.contactId,
                contactType: requestParameters.requestBody.contactType,
                relationship: requestParameters.requestBody.relationship
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContact(requestParameters.workerId, requestParameters.contactId, workerContactResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update CustomField at the worker level
         * @summary Worker CustomField
         * @param {WorkerApiUpdateCustomFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomField(requestParameters: WorkerApiUpdateCustomFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerCustomFieldsResource>> {
            const workerCustomFieldsResource: WorkerCustomFieldsResource = {
                workerCustomFieldId: requestParameters.requestBody.workerCustomFieldId,
                customFieldId: requestParameters.requestBody.customFieldId,
                type: requestParameters.requestBody.type,
                booleanValue: requestParameters.requestBody.booleanValue,
                textValue: requestParameters.requestBody.textValue,
                numericValue: requestParameters.requestBody.numericValue,
                dateValue: requestParameters.requestBody.dateValue,
                dropdownId: requestParameters.requestBody.dropdownId,
                dropdownValue: requestParameters.requestBody.dropdownValue,
                customFieldName: requestParameters.requestBody.customFieldName,
                required: requestParameters.requestBody.required,
                checkStub: requestParameters.requestBody.checkStub,
                employeeEditable: requestParameters.requestBody.employeeEditable
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomField(requestParameters.workerId, requestParameters.workerCustomFieldId, workerCustomFieldsResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a single direct deposit for a an \"Active\" worker.
         * @summary Worker Direct Deposit
         * @param {WorkerApiUpdateDirectDepositRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDirectDeposit(requestParameters: WorkerApiUpdateDirectDepositRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DirectDepositResource>> {
            const directDepositResource: DirectDepositResource = {
                directDepositId: requestParameters.requestBody.directDepositId,
                startDate: requestParameters.requestBody.startDate,
                paymentType: requestParameters.requestBody.paymentType,
                accountType: requestParameters.requestBody.accountType,
                value: requestParameters.requestBody.value,
                routingNumber: requestParameters.requestBody.routingNumber,
                accountNumber: requestParameters.requestBody.accountNumber,
                priority: requestParameters.requestBody.priority,
                links: requestParameters.requestBody.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDirectDeposit(requestParameters.workerId, requestParameters.directDepositId, directDepositResource, requestParameters.effectivitydate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update multiple direct deposits of an \"Active\" Worker at a time.
         * @summary Worker Direct Deposits
         * @param {WorkerApiUpdateDirectDepositsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDirectDeposits(requestParameters: WorkerApiUpdateDirectDepositsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DirectDepositResource>> {
            const directDepositResource: DirectDepositResource = {
                directDepositId: requestParameters.directDepositId,
                startDate: requestParameters.startDate,
                paymentType: requestParameters.paymentType,
                accountType: requestParameters.accountType,
                value: requestParameters.value,
                routingNumber: requestParameters.routingNumber,
                accountNumber: requestParameters.accountNumber,
                priority: requestParameters.priority,
                links: requestParameters.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDirectDeposits(requestParameters.workerId, directDepositResource, requestParameters.effectivitydate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the federal tax setup for a \"Active\" or \"In-progress\" worker.
         * @summary Worker Federal Tax
         * @param {WorkerApiUpdateFederalTaxSetupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFederalTaxSetup(requestParameters: WorkerApiUpdateFederalTaxSetupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerFederalTaxResource>> {
            const workerFederalTaxResource: WorkerFederalTaxResource = {
                taxId: requestParameters.taxId,
                filingStatus: requestParameters.filingStatus,
                multipleJobs: requestParameters.multipleJobs,
                dependentsAmount: requestParameters.dependentsAmount,
                otherIncome: requestParameters.otherIncome,
                deductionsAmount: requestParameters.deductionsAmount,
                extraWithholdingAmount: requestParameters.extraWithholdingAmount,
                taxesWithheld: requestParameters.taxesWithheld
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFederalTaxSetup(requestParameters.workerId, workerFederalTaxResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Update a single pay component associated to the \"Active\" worker.
         * @summary Worker Pay Component
         * @param {WorkerApiUpdatePayComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePayComponent(requestParameters: WorkerApiUpdatePayComponentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecurringResource>> {
            const recurringResource: RecurringResource = {
                workerComponentId: requestParameters.requestBody.workerComponentId,
                componentId: requestParameters.requestBody.componentId,
                name: requestParameters.requestBody.name,
                calculationType: requestParameters.requestBody.calculationType,
                calculationBaseId: requestParameters.requestBody.calculationBaseId,
                value: requestParameters.requestBody.value,
                startDate: requestParameters.requestBody.startDate,
                effectiveDate: requestParameters.requestBody.effectiveDate,
                endDate: requestParameters.requestBody.endDate,
                effectOnPay: requestParameters.requestBody.effectOnPay,
                classificationType: requestParameters.requestBody.classificationType,
                frequency: requestParameters.requestBody.frequency,
                links: requestParameters.requestBody.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePayComponent(requestParameters.workerId, requestParameters.workerComponentId, recurringResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Batch update pay components associated to the \"Active\" worker.
         * @summary Worker Pay Components
         * @param {WorkerApiUpdatePayComponentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePayComponents(requestParameters: WorkerApiUpdatePayComponentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecurringResource>> {
            const recurringResource: RecurringResource = {
                workerComponentId: requestParameters.workerComponentId,
                componentId: requestParameters.componentId,
                name: requestParameters.name,
                calculationType: requestParameters.calculationType,
                calculationBaseId: requestParameters.calculationBaseId,
                value: requestParameters.value,
                startDate: requestParameters.startDate,
                effectiveDate: requestParameters.effectiveDate,
                endDate: requestParameters.endDate,
                effectOnPay: requestParameters.effectOnPay,
                classificationType: requestParameters.classificationType,
                frequency: requestParameters.frequency,
                links: requestParameters.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePayComponents(requestParameters.workerId, recurringResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a unique worker (employee and contractor) that your application has been granted access to modify.
         * @summary Worker
         * @param {WorkerApiUpdateUniqueWorkerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUniqueWorker(requestParameters: WorkerApiUpdateUniqueWorkerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerResource1>> {
            const workerResource1: WorkerResource1 = {
                workerId: requestParameters.requestBody.workerId,
                employeeId: requestParameters.requestBody.employeeId,
                workerType: requestParameters.requestBody.workerType,
                employmentType: requestParameters.requestBody.employmentType,
                exemptionType: requestParameters.requestBody.exemptionType,
                birthDate: requestParameters.requestBody.birthDate,
                sex: requestParameters.requestBody.sex,
                ethnicityCode: requestParameters.requestBody.ethnicityCode,
                hireDate: requestParameters.requestBody.hireDate,
                clockId: requestParameters.requestBody.clockId,
                name: requestParameters.requestBody.name,
                legalId: requestParameters.requestBody.legalId,
                laborAssignmentId: requestParameters.requestBody.laborAssignmentId,
                locationId: requestParameters.requestBody.locationId,
                jobId: requestParameters.requestBody.jobId,
                job: requestParameters.requestBody.job,
                organization: requestParameters.requestBody.organization,
                supervisor: requestParameters.requestBody.supervisor,
                currentStatus: requestParameters.requestBody.currentStatus,
                communications: requestParameters.requestBody.communications,
                links: requestParameters.requestBody.links,
                workerCorrelationId: requestParameters.requestBody.workerCorrelationId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUniqueWorker(requestParameters.workerId, workerResource1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkerApi - factory interface
 * @export
 */
export const WorkerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkerApiFp(configuration)
    return {
        /**
         * Add a single communication to the \"Active\" or \"In-progress\" worker.
         * @summary Worker Communication
         * @param {WorkerApiAddCommunicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCommunication(requestParameters: WorkerApiAddCommunicationRequest, options?: AxiosRequestConfig): AxiosPromise<CommunicationResource1> {
            return localVarFp.addCommunication(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a direct deposit to an \"Active\" worker.
         * @summary Worker Direct Deposit
         * @param {WorkerApiAddDirectDepositRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDirectDeposit(requestParameters: WorkerApiAddDirectDepositRequest, options?: AxiosRequestConfig): AxiosPromise<DirectDepositResource> {
            return localVarFp.addDirectDeposit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add federal tax setup for a \"Active\" or \"In-progress\" worker.
         * @summary Worker Federal Tax
         * @param {WorkerApiAddFederalTaxSetupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFederalTaxSetup(requestParameters: WorkerApiAddFederalTaxSetupRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerFederalTaxResource> {
            return localVarFp.addFederalTaxSetup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a single pay component to the \"Active\" worker. This pay component will be used for apply recurring pay components on a workers check based on the frequency specified. supports the ability to POST both Addition and Reduction type pay components.
         * @summary Worker Pay Component
         * @param {WorkerApiAddPayComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPayComponent(requestParameters: WorkerApiAddPayComponentRequest, options?: AxiosRequestConfig): AxiosPromise<RecurringResource> {
            return localVarFp.addPayComponent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a single compensation rate to the \"Active\" or \"In-progress\" worker.
         * @summary Worker Pay Rate
         * @param {WorkerApiAddPayRateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPayRate(requestParameters: WorkerApiAddPayRateRequest, options?: AxiosRequestConfig): AxiosPromise<PayRateResource> {
            return localVarFp.addPayRate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add one or more contacts to a worker. A contact may represent a person or entity (organization) but not both. A contact must have at least one communication (telecom, postal, or email). Person contacts can have multiple communications for each communication type (telecom, postal, or email) to support BUSINESS and PERSONAL. Exactly one contact must be marked as primary for each contact type. If one or more contacts are posted for the same contact type, and there are currently no contacts of that type for the worker, the first contact in the list will be made primary unless another in the list is expressly marked as primary. When a new contact is made primary the previous primary contact will be marked as not primary. Use the GET /companies/{companyId}/contacttypes endpoint to get a full list of available contact types and relationship types (used for person contacts).
         * @summary Worker Contacts
         * @param {WorkerApiAddWorkerContactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWorkerContacts(requestParameters: WorkerApiAddWorkerContactsRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerContactResource> {
            return localVarFp.addWorkerContacts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create CustomField at the worker level
         * @summary Worker Custom Field
         * @param {WorkerApiCreateCustomFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomField(requestParameters: WorkerApiCreateCustomFieldRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerCustomFieldsResource> {
            return localVarFp.createCustomField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a worker contact by contactId.
         * @summary Worker Contact
         * @param {WorkerApiDeleteContactByContactIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContactByContactId(requestParameters: WorkerApiDeleteContactByContactIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteContactByContactId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete CustomField at the worker level
         * @summary Worker Custom Field
         * @param {WorkerApiDeleteCustomFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomField(requestParameters: WorkerApiDeleteCustomFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCustomField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete in progress Worker
         * @summary Worker
         * @param {WorkerApiDeleteInProgressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInProgress(requestParameters: WorkerApiDeleteInProgressRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteInProgress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A \"Active\" or \"In-progress\" workers single communication item.
         * @summary Worker Communication
         * @param {WorkerApiGetCommunicationItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommunicationItem(requestParameters: WorkerApiGetCommunicationItemRequest, options?: AxiosRequestConfig): AxiosPromise<CommunicationResource1> {
            return localVarFp.getCommunicationItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Information about \"Active\" or \"In-progress\"  workers communications.
         * @summary Worker Communications
         * @param {WorkerApiGetCommunicationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommunications(requestParameters: WorkerApiGetCommunicationsRequest, options?: AxiosRequestConfig): AxiosPromise<CommunicationResource1> {
            return localVarFp.getCommunications(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Information about a workers compensation.
         * @summary Worker Compensation
         * @param {WorkerApiGetCompensationInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompensationInformation(requestParameters: WorkerApiGetCompensationInformationRequest, options?: AxiosRequestConfig): AxiosPromise<CollectionResource> {
            return localVarFp.getCompensationInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a worker contact by contactId.
         * @summary Worker Contact
         * @param {WorkerApiGetContactByContactIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactByContactId(requestParameters: WorkerApiGetContactByContactIdRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerContactResource> {
            return localVarFp.getContactByContactId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all contacts for the specified worker.
         * @summary Worker Contacts
         * @param {WorkerApiGetContactsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContacts(requestParameters: WorkerApiGetContactsRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerContactResource> {
            return localVarFp.getContacts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the worker\'s customFields by workerCustomFieldId
         * @summary Worker Custom Field
         * @param {WorkerApiGetCustomFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomField(requestParameters: WorkerApiGetCustomFieldRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerCustomFieldsResource> {
            return localVarFp.getCustomField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the worker\'s customFields
         * @summary Worker Custom Fields
         * @param {WorkerApiGetCustomFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomFields(requestParameters: WorkerApiGetCustomFieldsRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerCustomFieldsResource> {
            return localVarFp.getCustomFields(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Single direct deposit for an \"Active\" worker.
         * @summary Worker Direct Deposit
         * @param {WorkerApiGetDirectDepositRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDirectDeposit(requestParameters: WorkerApiGetDirectDepositRequest, options?: AxiosRequestConfig): AxiosPromise<DirectDepositResource> {
            return localVarFp.getDirectDeposit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Federal tax setup for \"Active\" or \"In-progress\"  worker.
         * @summary Worker Federal Tax
         * @param {WorkerApiGetFederalTaxSetupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFederalTaxSetup(requestParameters: WorkerApiGetFederalTaxSetupRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerFederalTaxResource> {
            return localVarFp.getFederalTaxSetup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Information about a unique worker (employee and contractor) that your application has been granted access to. Currently workers that exist within Paychex Flex payroll will be available, future enhancements will make workers from other Paychex systems available.
         * @summary Worker
         * @param {WorkerApiGetInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation(requestParameters: WorkerApiGetInformationRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerResource1> {
            return localVarFp.getInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific pay component that a \"Active\" worker has.
         * @summary Worker Pay Component
         * @param {WorkerApiGetPayComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayComponent(requestParameters: WorkerApiGetPayComponentRequest, options?: AxiosRequestConfig): AxiosPromise<RecurringResource> {
            return localVarFp.getPayComponent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the the pay components for a specific \"Active\" worker.
         * @summary Worker Pay Components
         * @param {WorkerApiGetPayComponentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayComponents(requestParameters: WorkerApiGetPayComponentsRequest, options?: AxiosRequestConfig): AxiosPromise<RecurringResource> {
            return localVarFp.getPayComponents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A workers single compensation rate.
         * @summary Worker Pay Rate
         * @param {WorkerApiGetPayRateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayRate(requestParameters: WorkerApiGetPayRateRequest, options?: AxiosRequestConfig): AxiosPromise<PayRateResource> {
            return localVarFp.getPayRate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Information about a workers compensation rates. Rate one is only one available if the worker is In-Progress. The multiple rates is available for workers that have been completed within Flex. It’s not required for a worker to have a rate in the system.
         * @summary Worker Pay Rates
         * @param {WorkerApiGetPayRatesByWorkerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayRatesByWorkerId(requestParameters: WorkerApiGetPayRatesByWorkerIdRequest, options?: AxiosRequestConfig): AxiosPromise<PayRateResource> {
            return localVarFp.getPayRatesByWorkerId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Information about a workers compensation pay standards.
         * @summary Worker Pay Standards
         * @param {WorkerApiGetPayStandardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayStandards(requestParameters: WorkerApiGetPayStandardsRequest, options?: AxiosRequestConfig): AxiosPromise<PayStandardResource> {
            return localVarFp.getPayStandards(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Array of time off balance(s) a worker has for each policy type of time off, for that worker. NOTE: This data is only available if the client has the Time Off Accrual product (This is not related to the Flex Time product which has it is own dev portal for those APIs).
         * @summary Worker Time Off
         * @param {WorkerApiGetTimeOffBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeOffBalance(requestParameters: WorkerApiGetTimeOffBalanceRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffResource> {
            return localVarFp.getTimeOffBalance(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the full list of worker statuses (past, present, and future). For each status the workerStatusId is the value of the corresponding company worker status ID. If no company worker status with a matching type/reason exists then workerStatusId is omitted. If multiple statuses share an effective date the order field will indicate the order in which they were posted.
         * @summary Worker Statuses
         * @param {WorkerApiGetWorkerStatusListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkerStatusList(requestParameters: WorkerApiGetWorkerStatusListRequest, options?: AxiosRequestConfig): AxiosPromise<Status1> {
            return localVarFp.getWorkerStatusList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Array of assignments that will be used for auto distribution assigned to the worker.
         * @summary Worker Assignments
         * @param {WorkerApiListAssignmentDistributionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssignmentDistributions(requestParameters: WorkerApiListAssignmentDistributionsRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerAssignmentDistributionsResource> {
            return localVarFp.listAssignmentDistributions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Array of direct deposits on the \"Active\" worker.
         * @summary Worker Direct Deposits
         * @param {WorkerApiListDirectDepositsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDirectDeposits(requestParameters: WorkerApiListDirectDepositsRequest, options?: AxiosRequestConfig): AxiosPromise<DirectDepositResource> {
            return localVarFp.listDirectDeposits(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a communication item from a \"Active\" or \"In-progress\" worker.
         * @summary Worker Communication
         * @param {WorkerApiRemoveCommunicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCommunication(requestParameters: WorkerApiRemoveCommunicationRequest, options?: AxiosRequestConfig): AxiosPromise<CommunicationResource1> {
            return localVarFp.removeCommunication(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a single direct deposit for a \"Active\" worker.
         * @summary Worker Direct Deposit
         * @param {WorkerApiRemoveDirectDepositRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDirectDeposit(requestParameters: WorkerApiRemoveDirectDepositRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeDirectDeposit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the federal tax setup for an \"In-progress\" worker.
         * @summary Worker Federal Tax
         * @param {WorkerApiRemoveFederalTaxRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFederalTax(requestParameters: WorkerApiRemoveFederalTaxRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFederalTax(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a specific pay component that a \"Active\" worker has.
         * @summary Worker Pay Component
         * @param {WorkerApiRemovePayComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePayComponent(requestParameters: WorkerApiRemovePayComponentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removePayComponent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a compensation rate from a worker.
         * @summary Worker Pay Rate
         * @param {WorkerApiRemovePayRateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePayRate(requestParameters: WorkerApiRemovePayRateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removePayRate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a \"Active\" or \"In-progress\" workers specific communication item.
         * @summary Worker Communication
         * @param {WorkerApiUpdateCommunicationItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCommunicationItem(requestParameters: WorkerApiUpdateCommunicationItemRequest, options?: AxiosRequestConfig): AxiosPromise<CommunicationResource1> {
            return localVarFp.updateCommunicationItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a workers specific compensation rate.
         * @summary Worker Pay Rate
         * @param {WorkerApiUpdateCompensationRateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompensationRate(requestParameters: WorkerApiUpdateCompensationRateRequest, options?: AxiosRequestConfig): AxiosPromise<PayRateResource> {
            return localVarFp.updateCompensationRate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a worker contact. A contact may represent a person or entity (organization) but not both. A contact must have at least one communication (telecom, postal, or email). Person contacts can have multiple communications for each communication type (telecom, postal, or email) to support BUSINESS and PERSONAL. Exactly one contact must be marked as primary for each contact type. When a new contact is made primary the previous primary contact will be marked as not primary. A postal contact can be switched from a street address to a PO box and vice versa. This is done by setting either streetLineOne or postOfficeBox (a postal communication may not have both). Use the GET /companies/{companyId}/contacttypes endpoint to get a full list of available contact types and relationship types (used for person contacts).
         * @summary Worker Contacts
         * @param {WorkerApiUpdateContactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContact(requestParameters: WorkerApiUpdateContactRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerContactResource> {
            return localVarFp.updateContact(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update CustomField at the worker level
         * @summary Worker CustomField
         * @param {WorkerApiUpdateCustomFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomField(requestParameters: WorkerApiUpdateCustomFieldRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerCustomFieldsResource> {
            return localVarFp.updateCustomField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a single direct deposit for a an \"Active\" worker.
         * @summary Worker Direct Deposit
         * @param {WorkerApiUpdateDirectDepositRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDirectDeposit(requestParameters: WorkerApiUpdateDirectDepositRequest, options?: AxiosRequestConfig): AxiosPromise<DirectDepositResource> {
            return localVarFp.updateDirectDeposit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update multiple direct deposits of an \"Active\" Worker at a time.
         * @summary Worker Direct Deposits
         * @param {WorkerApiUpdateDirectDepositsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDirectDeposits(requestParameters: WorkerApiUpdateDirectDepositsRequest, options?: AxiosRequestConfig): AxiosPromise<DirectDepositResource> {
            return localVarFp.updateDirectDeposits(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the federal tax setup for a \"Active\" or \"In-progress\" worker.
         * @summary Worker Federal Tax
         * @param {WorkerApiUpdateFederalTaxSetupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFederalTaxSetup(requestParameters: WorkerApiUpdateFederalTaxSetupRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerFederalTaxResource> {
            return localVarFp.updateFederalTaxSetup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Update a single pay component associated to the \"Active\" worker.
         * @summary Worker Pay Component
         * @param {WorkerApiUpdatePayComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayComponent(requestParameters: WorkerApiUpdatePayComponentRequest, options?: AxiosRequestConfig): AxiosPromise<RecurringResource> {
            return localVarFp.updatePayComponent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Batch update pay components associated to the \"Active\" worker.
         * @summary Worker Pay Components
         * @param {WorkerApiUpdatePayComponentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayComponents(requestParameters: WorkerApiUpdatePayComponentsRequest, options?: AxiosRequestConfig): AxiosPromise<RecurringResource> {
            return localVarFp.updatePayComponents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a unique worker (employee and contractor) that your application has been granted access to modify.
         * @summary Worker
         * @param {WorkerApiUpdateUniqueWorkerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUniqueWorker(requestParameters: WorkerApiUpdateUniqueWorkerRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerResource1> {
            return localVarFp.updateUniqueWorker(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addCommunication operation in WorkerApi.
 * @export
 * @interface WorkerApiAddCommunicationRequest
 */
export type WorkerApiAddCommunicationRequest = {
    
    /**
    * The id assigned to the worker that workers are being requested for.
    * @type {string}
    * @memberof WorkerApiAddCommunication
    */
    readonly workerId: string
    
} & CommunicationResource1

/**
 * Request parameters for addDirectDeposit operation in WorkerApi.
 * @export
 * @interface WorkerApiAddDirectDepositRequest
 */
export type WorkerApiAddDirectDepositRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiAddDirectDeposit
    */
    readonly workerId: string
    
} & DirectDepositResource

/**
 * Request parameters for addFederalTaxSetup operation in WorkerApi.
 * @export
 * @interface WorkerApiAddFederalTaxSetupRequest
 */
export type WorkerApiAddFederalTaxSetupRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiAddFederalTaxSetup
    */
    readonly workerId: string
    
} & WorkerFederalTaxResource

/**
 * Request parameters for addPayComponent operation in WorkerApi.
 * @export
 * @interface WorkerApiAddPayComponentRequest
 */
export type WorkerApiAddPayComponentRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiAddPayComponent
    */
    readonly workerId: string
    
} & RecurringResource

/**
 * Request parameters for addPayRate operation in WorkerApi.
 * @export
 * @interface WorkerApiAddPayRateRequest
 */
export type WorkerApiAddPayRateRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiAddPayRate
    */
    readonly workerId: string
    
} & PayRateResource

/**
 * Request parameters for addWorkerContacts operation in WorkerApi.
 * @export
 * @interface WorkerApiAddWorkerContactsRequest
 */
export type WorkerApiAddWorkerContactsRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiAddWorkerContacts
    */
    readonly workerId: string
    
} & WorkerContactResource

/**
 * Request parameters for createCustomField operation in WorkerApi.
 * @export
 * @interface WorkerApiCreateCustomFieldRequest
 */
export type WorkerApiCreateCustomFieldRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiCreateCustomField
    */
    readonly workerId: string
    
} & WorkerCustomFieldsResource

/**
 * Request parameters for deleteContactByContactId operation in WorkerApi.
 * @export
 * @interface WorkerApiDeleteContactByContactIdRequest
 */
export type WorkerApiDeleteContactByContactIdRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiDeleteContactByContactId
    */
    readonly workerId: string
    
    /**
    * ID associated with desired worker contact.
    * @type {string}
    * @memberof WorkerApiDeleteContactByContactId
    */
    readonly contactId: string
    
}

/**
 * Request parameters for deleteCustomField operation in WorkerApi.
 * @export
 * @interface WorkerApiDeleteCustomFieldRequest
 */
export type WorkerApiDeleteCustomFieldRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiDeleteCustomField
    */
    readonly workerId: string
    
    /**
    * ID associated with desired worker custom field.
    * @type {string}
    * @memberof WorkerApiDeleteCustomField
    */
    readonly workerCustomFieldId: string
    
}

/**
 * Request parameters for deleteInProgress operation in WorkerApi.
 * @export
 * @interface WorkerApiDeleteInProgressRequest
 */
export type WorkerApiDeleteInProgressRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiDeleteInProgress
    */
    readonly workerId: string
    
}

/**
 * Request parameters for getCommunicationItem operation in WorkerApi.
 * @export
 * @interface WorkerApiGetCommunicationItemRequest
 */
export type WorkerApiGetCommunicationItemRequest = {
    
    /**
    * The id assigned to the worker that workers are being requested for.
    * @type {string}
    * @memberof WorkerApiGetCommunicationItem
    */
    readonly workerId: string
    
    /**
    * The id of a single workers communication.
    * @type {string}
    * @memberof WorkerApiGetCommunicationItem
    */
    readonly communicationId: string
    
}

/**
 * Request parameters for getCommunications operation in WorkerApi.
 * @export
 * @interface WorkerApiGetCommunicationsRequest
 */
export type WorkerApiGetCommunicationsRequest = {
    
    /**
    * The id assigned to the worker that workers are being requested for.
    * @type {string}
    * @memberof WorkerApiGetCommunications
    */
    readonly workerId: string
    
}

/**
 * Request parameters for getCompensationInformation operation in WorkerApi.
 * @export
 * @interface WorkerApiGetCompensationInformationRequest
 */
export type WorkerApiGetCompensationInformationRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiGetCompensationInformation
    */
    readonly workerId: string
    
}

/**
 * Request parameters for getContactByContactId operation in WorkerApi.
 * @export
 * @interface WorkerApiGetContactByContactIdRequest
 */
export type WorkerApiGetContactByContactIdRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiGetContactByContactId
    */
    readonly workerId: string
    
    /**
    * The id of a single Contact.
    * @type {string}
    * @memberof WorkerApiGetContactByContactId
    */
    readonly contactId: string
    
}

/**
 * Request parameters for getContacts operation in WorkerApi.
 * @export
 * @interface WorkerApiGetContactsRequest
 */
export type WorkerApiGetContactsRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiGetContacts
    */
    readonly workerId: string
    
}

/**
 * Request parameters for getCustomField operation in WorkerApi.
 * @export
 * @interface WorkerApiGetCustomFieldRequest
 */
export type WorkerApiGetCustomFieldRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiGetCustomField
    */
    readonly workerId: string
    
    /**
    * ID associated with desired worker custom field.
    * @type {string}
    * @memberof WorkerApiGetCustomField
    */
    readonly workerCustomFieldId: string
    
    /**
    * Returns custom field as of the date used in the request
    * @type {string}
    * @memberof WorkerApiGetCustomField
    */
    readonly asof?: string
    
}

/**
 * Request parameters for getCustomFields operation in WorkerApi.
 * @export
 * @interface WorkerApiGetCustomFieldsRequest
 */
export type WorkerApiGetCustomFieldsRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiGetCustomFields
    */
    readonly workerId: string
    
    /**
    * Returns all custom fields as of the date used in the request
    * @type {string}
    * @memberof WorkerApiGetCustomFields
    */
    readonly asof?: string
    
}

/**
 * Request parameters for getDirectDeposit operation in WorkerApi.
 * @export
 * @interface WorkerApiGetDirectDepositRequest
 */
export type WorkerApiGetDirectDepositRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiGetDirectDeposit
    */
    readonly workerId: string
    
    /**
    * The id assigned to the direct deposit for this worker.
    * @type {string}
    * @memberof WorkerApiGetDirectDeposit
    */
    readonly directDepositId: string
    
    /**
    * The effectivity date.
    * @type {string}
    * @memberof WorkerApiGetDirectDeposit
    */
    readonly effectivitydate?: string
    
}

/**
 * Request parameters for getFederalTaxSetup operation in WorkerApi.
 * @export
 * @interface WorkerApiGetFederalTaxSetupRequest
 */
export type WorkerApiGetFederalTaxSetupRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiGetFederalTaxSetup
    */
    readonly workerId: string
    
}

/**
 * Request parameters for getInformation operation in WorkerApi.
 * @export
 * @interface WorkerApiGetInformationRequest
 */
export type WorkerApiGetInformationRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiGetInformation
    */
    readonly workerId: string
    
}

/**
 * Request parameters for getPayComponent operation in WorkerApi.
 * @export
 * @interface WorkerApiGetPayComponentRequest
 */
export type WorkerApiGetPayComponentRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiGetPayComponent
    */
    readonly workerId: string
    
    /**
    * The id of a single pay component that a  \"Active\" worker has.
    * @type {string}
    * @memberof WorkerApiGetPayComponent
    */
    readonly workerComponentId: string
    
    /**
    * Returns pay component as of the date used in the request
    * @type {string}
    * @memberof WorkerApiGetPayComponent
    */
    readonly asof?: string
    
}

/**
 * Request parameters for getPayComponents operation in WorkerApi.
 * @export
 * @interface WorkerApiGetPayComponentsRequest
 */
export type WorkerApiGetPayComponentsRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiGetPayComponents
    */
    readonly workerId: string
    
    /**
    * What the effect on pay will be (REDUCTION OR ADDITION), currently only reductions are available.
    * @type {string}
    * @memberof WorkerApiGetPayComponents
    */
    readonly effectonpay?: string
    
    /**
    * Returns all pay components as of the date used in the request
    * @type {string}
    * @memberof WorkerApiGetPayComponents
    */
    readonly asof?: string
    
    /**
    * The name of a pay component that a workers has.
    * @type {string}
    * @memberof WorkerApiGetPayComponents
    */
    readonly name?: string
    
    /**
    * The unique identifier of the pay component.
    * @type {string}
    * @memberof WorkerApiGetPayComponents
    */
    readonly componentid?: string
    
    /**
    * The classification type of a pay component that a worker has. (such as \"DEDUCTION\", or \"REGULAR\",)
    * @type {string}
    * @memberof WorkerApiGetPayComponents
    */
    readonly classificationtype?: string
    
}

/**
 * Request parameters for getPayRate operation in WorkerApi.
 * @export
 * @interface WorkerApiGetPayRateRequest
 */
export type WorkerApiGetPayRateRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiGetPayRate
    */
    readonly workerId: string
    
    /**
    * The id of a single workers compensation rate.
    * @type {string}
    * @memberof WorkerApiGetPayRate
    */
    readonly rateId: string
    
    /**
    * Returns compensation as of the date used in the request
    * @type {string}
    * @memberof WorkerApiGetPayRate
    */
    readonly asof?: string
    
}

/**
 * Request parameters for getPayRatesByWorkerId operation in WorkerApi.
 * @export
 * @interface WorkerApiGetPayRatesByWorkerIdRequest
 */
export type WorkerApiGetPayRatesByWorkerIdRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiGetPayRatesByWorkerId
    */
    readonly workerId: string
    
    /**
    * Returns all pay rates as of the date used in the request
    * @type {string}
    * @memberof WorkerApiGetPayRatesByWorkerId
    */
    readonly asof?: string
    
}

/**
 * Request parameters for getPayStandards operation in WorkerApi.
 * @export
 * @interface WorkerApiGetPayStandardsRequest
 */
export type WorkerApiGetPayStandardsRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiGetPayStandards
    */
    readonly workerId: string
    
}

/**
 * Request parameters for getTimeOffBalance operation in WorkerApi.
 * @export
 * @interface WorkerApiGetTimeOffBalanceRequest
 */
export type WorkerApiGetTimeOffBalanceRequest = {
    
    /**
    * The ID of the worker.
    * @type {string}
    * @memberof WorkerApiGetTimeOffBalance
    */
    readonly workerId: string
    
}

/**
 * Request parameters for getWorkerStatusList operation in WorkerApi.
 * @export
 * @interface WorkerApiGetWorkerStatusListRequest
 */
export type WorkerApiGetWorkerStatusListRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiGetWorkerStatusList
    */
    readonly workerId: string
    
}

/**
 * Request parameters for listAssignmentDistributions operation in WorkerApi.
 * @export
 * @interface WorkerApiListAssignmentDistributionsRequest
 */
export type WorkerApiListAssignmentDistributionsRequest = {
    
    /**
    * The ID of the worker.
    * @type {string}
    * @memberof WorkerApiListAssignmentDistributions
    */
    readonly workerId: string
    
}

/**
 * Request parameters for listDirectDeposits operation in WorkerApi.
 * @export
 * @interface WorkerApiListDirectDepositsRequest
 */
export type WorkerApiListDirectDepositsRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiListDirectDeposits
    */
    readonly workerId: string
    
    /**
    * The effectivity date
    * @type {string}
    * @memberof WorkerApiListDirectDeposits
    */
    readonly effectivitydate?: string
    
    /**
    * Returns all direct deposits as of the date used in the request
    * @type {string}
    * @memberof WorkerApiListDirectDeposits
    */
    readonly asof?: string
    
}

/**
 * Request parameters for removeCommunication operation in WorkerApi.
 * @export
 * @interface WorkerApiRemoveCommunicationRequest
 */
export type WorkerApiRemoveCommunicationRequest = {
    
    /**
    * The id assigned to the worker that workers are being requested for.
    * @type {string}
    * @memberof WorkerApiRemoveCommunication
    */
    readonly workerId: string
    
    /**
    * The id of a single workers communication.
    * @type {string}
    * @memberof WorkerApiRemoveCommunication
    */
    readonly communicationId: string
    
}

/**
 * Request parameters for removeDirectDeposit operation in WorkerApi.
 * @export
 * @interface WorkerApiRemoveDirectDepositRequest
 */
export type WorkerApiRemoveDirectDepositRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiRemoveDirectDeposit
    */
    readonly workerId: string
    
    /**
    * The id assigned to the direct deposit for this worker.
    * @type {string}
    * @memberof WorkerApiRemoveDirectDeposit
    */
    readonly directDepositId: string
    
    /**
    * The effectivity date.
    * @type {string}
    * @memberof WorkerApiRemoveDirectDeposit
    */
    readonly effectivitydate?: string
    
}

/**
 * Request parameters for removeFederalTax operation in WorkerApi.
 * @export
 * @interface WorkerApiRemoveFederalTaxRequest
 */
export type WorkerApiRemoveFederalTaxRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiRemoveFederalTax
    */
    readonly workerId: string
    
}

/**
 * Request parameters for removePayComponent operation in WorkerApi.
 * @export
 * @interface WorkerApiRemovePayComponentRequest
 */
export type WorkerApiRemovePayComponentRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiRemovePayComponent
    */
    readonly workerId: string
    
    /**
    * The id of a single pay component that a workers has.
    * @type {string}
    * @memberof WorkerApiRemovePayComponent
    */
    readonly workerComponentId: string
    
}

/**
 * Request parameters for removePayRate operation in WorkerApi.
 * @export
 * @interface WorkerApiRemovePayRateRequest
 */
export type WorkerApiRemovePayRateRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiRemovePayRate
    */
    readonly workerId: string
    
    /**
    * The id of a single workers compensation rate.
    * @type {string}
    * @memberof WorkerApiRemovePayRate
    */
    readonly rateId: string
    
}

/**
 * Request parameters for updateCommunicationItem operation in WorkerApi.
 * @export
 * @interface WorkerApiUpdateCommunicationItemRequest
 */
export type WorkerApiUpdateCommunicationItemRequest = {
    /**
    * The id assigned to the worker that workers are being requested for.
    * @type {string}
    * @memberof WorkerApiUpdateCommunicationItem
    */
    readonly workerId: string
    /**
    * The id of a single workers communication.
    * @type {string}
    * @memberof WorkerApiUpdateCommunicationItem
    */
    readonly communicationId: string
    /**
    * 
    * @type {CommunicationResource1}
    * @memberof WorkerApiUpdateCommunicationItem
    */
    readonly requestBody: CommunicationResource1
}

/**
 * Request parameters for updateCompensationRate operation in WorkerApi.
 * @export
 * @interface WorkerApiUpdateCompensationRateRequest
 */
export type WorkerApiUpdateCompensationRateRequest = {
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiUpdateCompensationRate
    */
    readonly workerId: string
    /**
    * The id of a single workers compensation rate.
    * @type {string}
    * @memberof WorkerApiUpdateCompensationRate
    */
    readonly rateId: string
    /**
    * 
    * @type {PayRateResource}
    * @memberof WorkerApiUpdateCompensationRate
    */
    readonly requestBody: PayRateResource
}

/**
 * Request parameters for updateContact operation in WorkerApi.
 * @export
 * @interface WorkerApiUpdateContactRequest
 */
export type WorkerApiUpdateContactRequest = {
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiUpdateContact
    */
    readonly workerId: string
    /**
    * ID associated with desired worker contact.
    * @type {string}
    * @memberof WorkerApiUpdateContact
    */
    readonly contactId: string
    /**
    * 
    * @type {WorkerContactResource}
    * @memberof WorkerApiUpdateContact
    */
    readonly requestBody: WorkerContactResource
}

/**
 * Request parameters for updateCustomField operation in WorkerApi.
 * @export
 * @interface WorkerApiUpdateCustomFieldRequest
 */
export type WorkerApiUpdateCustomFieldRequest = {
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiUpdateCustomField
    */
    readonly workerId: string
    /**
    * ID associated with desired worker custom field.
    * @type {string}
    * @memberof WorkerApiUpdateCustomField
    */
    readonly workerCustomFieldId: string
    /**
    * 
    * @type {WorkerCustomFieldsResource}
    * @memberof WorkerApiUpdateCustomField
    */
    readonly requestBody: WorkerCustomFieldsResource
}

/**
 * Request parameters for updateDirectDeposit operation in WorkerApi.
 * @export
 * @interface WorkerApiUpdateDirectDepositRequest
 */
export type WorkerApiUpdateDirectDepositRequest = {
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiUpdateDirectDeposit
    */
    readonly workerId: string
    /**
    * The id assigned to the direct deposit for this worker.
    * @type {string}
    * @memberof WorkerApiUpdateDirectDeposit
    */
    readonly directDepositId: string
    /**
    * 
    * @type {DirectDepositResource}
    * @memberof WorkerApiUpdateDirectDeposit
    */
    readonly requestBody: DirectDepositResource
    /**
    * The effectivity date.
    * @type {string}
    * @memberof WorkerApiUpdateDirectDeposit
    */
    readonly effectivitydate?: string
}

/**
 * Request parameters for updateDirectDeposits operation in WorkerApi.
 * @export
 * @interface WorkerApiUpdateDirectDepositsRequest
 */
export type WorkerApiUpdateDirectDepositsRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiUpdateDirectDeposits
    */
    readonly workerId: string
    
    /**
    * The effectivity date.
    * @type {string}
    * @memberof WorkerApiUpdateDirectDeposits
    */
    readonly effectivitydate?: string
    
} & DirectDepositResource

/**
 * Request parameters for updateFederalTaxSetup operation in WorkerApi.
 * @export
 * @interface WorkerApiUpdateFederalTaxSetupRequest
 */
export type WorkerApiUpdateFederalTaxSetupRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiUpdateFederalTaxSetup
    */
    readonly workerId: string
    
} & WorkerFederalTaxResource

/**
 * Request parameters for updatePayComponent operation in WorkerApi.
 * @export
 * @interface WorkerApiUpdatePayComponentRequest
 */
export type WorkerApiUpdatePayComponentRequest = {
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiUpdatePayComponent
    */
    readonly workerId: string
    /**
    * The id of a single pay component that a workers has.
    * @type {string}
    * @memberof WorkerApiUpdatePayComponent
    */
    readonly workerComponentId: string
    /**
    * 
    * @type {RecurringResource}
    * @memberof WorkerApiUpdatePayComponent
    */
    readonly requestBody: RecurringResource
}

/**
 * Request parameters for updatePayComponents operation in WorkerApi.
 * @export
 * @interface WorkerApiUpdatePayComponentsRequest
 */
export type WorkerApiUpdatePayComponentsRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiUpdatePayComponents
    */
    readonly workerId: string
    
} & RecurringResource

/**
 * Request parameters for updateUniqueWorker operation in WorkerApi.
 * @export
 * @interface WorkerApiUpdateUniqueWorkerRequest
 */
export type WorkerApiUpdateUniqueWorkerRequest = {
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof WorkerApiUpdateUniqueWorker
    */
    readonly workerId: string
    /**
    * 
    * @type {WorkerResource1}
    * @memberof WorkerApiUpdateUniqueWorker
    */
    readonly requestBody: WorkerResource1
}

/**
 * WorkerApiGenerated - object-oriented interface
 * @export
 * @class WorkerApiGenerated
 * @extends {BaseAPI}
 */
export class WorkerApiGenerated extends BaseAPI {
    /**
     * Add a single communication to the \"Active\" or \"In-progress\" worker.
     * @summary Worker Communication
     * @param {WorkerApiAddCommunicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public addCommunication(requestParameters: WorkerApiAddCommunicationRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).addCommunication(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a direct deposit to an \"Active\" worker.
     * @summary Worker Direct Deposit
     * @param {WorkerApiAddDirectDepositRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public addDirectDeposit(requestParameters: WorkerApiAddDirectDepositRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).addDirectDeposit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add federal tax setup for a \"Active\" or \"In-progress\" worker.
     * @summary Worker Federal Tax
     * @param {WorkerApiAddFederalTaxSetupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public addFederalTaxSetup(requestParameters: WorkerApiAddFederalTaxSetupRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).addFederalTaxSetup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a single pay component to the \"Active\" worker. This pay component will be used for apply recurring pay components on a workers check based on the frequency specified. supports the ability to POST both Addition and Reduction type pay components.
     * @summary Worker Pay Component
     * @param {WorkerApiAddPayComponentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public addPayComponent(requestParameters: WorkerApiAddPayComponentRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).addPayComponent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a single compensation rate to the \"Active\" or \"In-progress\" worker.
     * @summary Worker Pay Rate
     * @param {WorkerApiAddPayRateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public addPayRate(requestParameters: WorkerApiAddPayRateRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).addPayRate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add one or more contacts to a worker. A contact may represent a person or entity (organization) but not both. A contact must have at least one communication (telecom, postal, or email). Person contacts can have multiple communications for each communication type (telecom, postal, or email) to support BUSINESS and PERSONAL. Exactly one contact must be marked as primary for each contact type. If one or more contacts are posted for the same contact type, and there are currently no contacts of that type for the worker, the first contact in the list will be made primary unless another in the list is expressly marked as primary. When a new contact is made primary the previous primary contact will be marked as not primary. Use the GET /companies/{companyId}/contacttypes endpoint to get a full list of available contact types and relationship types (used for person contacts).
     * @summary Worker Contacts
     * @param {WorkerApiAddWorkerContactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public addWorkerContacts(requestParameters: WorkerApiAddWorkerContactsRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).addWorkerContacts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create CustomField at the worker level
     * @summary Worker Custom Field
     * @param {WorkerApiCreateCustomFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public createCustomField(requestParameters: WorkerApiCreateCustomFieldRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).createCustomField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a worker contact by contactId.
     * @summary Worker Contact
     * @param {WorkerApiDeleteContactByContactIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public deleteContactByContactId(requestParameters: WorkerApiDeleteContactByContactIdRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).deleteContactByContactId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete CustomField at the worker level
     * @summary Worker Custom Field
     * @param {WorkerApiDeleteCustomFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public deleteCustomField(requestParameters: WorkerApiDeleteCustomFieldRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).deleteCustomField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete in progress Worker
     * @summary Worker
     * @param {WorkerApiDeleteInProgressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public deleteInProgress(requestParameters: WorkerApiDeleteInProgressRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).deleteInProgress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A \"Active\" or \"In-progress\" workers single communication item.
     * @summary Worker Communication
     * @param {WorkerApiGetCommunicationItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public getCommunicationItem(requestParameters: WorkerApiGetCommunicationItemRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).getCommunicationItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Information about \"Active\" or \"In-progress\"  workers communications.
     * @summary Worker Communications
     * @param {WorkerApiGetCommunicationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public getCommunications(requestParameters: WorkerApiGetCommunicationsRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).getCommunications(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Information about a workers compensation.
     * @summary Worker Compensation
     * @param {WorkerApiGetCompensationInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public getCompensationInformation(requestParameters: WorkerApiGetCompensationInformationRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).getCompensationInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a worker contact by contactId.
     * @summary Worker Contact
     * @param {WorkerApiGetContactByContactIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public getContactByContactId(requestParameters: WorkerApiGetContactByContactIdRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).getContactByContactId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all contacts for the specified worker.
     * @summary Worker Contacts
     * @param {WorkerApiGetContactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public getContacts(requestParameters: WorkerApiGetContactsRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).getContacts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the worker\'s customFields by workerCustomFieldId
     * @summary Worker Custom Field
     * @param {WorkerApiGetCustomFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public getCustomField(requestParameters: WorkerApiGetCustomFieldRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).getCustomField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the worker\'s customFields
     * @summary Worker Custom Fields
     * @param {WorkerApiGetCustomFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public getCustomFields(requestParameters: WorkerApiGetCustomFieldsRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).getCustomFields(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Single direct deposit for an \"Active\" worker.
     * @summary Worker Direct Deposit
     * @param {WorkerApiGetDirectDepositRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public getDirectDeposit(requestParameters: WorkerApiGetDirectDepositRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).getDirectDeposit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Federal tax setup for \"Active\" or \"In-progress\"  worker.
     * @summary Worker Federal Tax
     * @param {WorkerApiGetFederalTaxSetupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public getFederalTaxSetup(requestParameters: WorkerApiGetFederalTaxSetupRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).getFederalTaxSetup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Information about a unique worker (employee and contractor) that your application has been granted access to. Currently workers that exist within Paychex Flex payroll will be available, future enhancements will make workers from other Paychex systems available.
     * @summary Worker
     * @param {WorkerApiGetInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public getInformation(requestParameters: WorkerApiGetInformationRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).getInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific pay component that a \"Active\" worker has.
     * @summary Worker Pay Component
     * @param {WorkerApiGetPayComponentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public getPayComponent(requestParameters: WorkerApiGetPayComponentRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).getPayComponent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all the the pay components for a specific \"Active\" worker.
     * @summary Worker Pay Components
     * @param {WorkerApiGetPayComponentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public getPayComponents(requestParameters: WorkerApiGetPayComponentsRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).getPayComponents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A workers single compensation rate.
     * @summary Worker Pay Rate
     * @param {WorkerApiGetPayRateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public getPayRate(requestParameters: WorkerApiGetPayRateRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).getPayRate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Information about a workers compensation rates. Rate one is only one available if the worker is In-Progress. The multiple rates is available for workers that have been completed within Flex. It’s not required for a worker to have a rate in the system.
     * @summary Worker Pay Rates
     * @param {WorkerApiGetPayRatesByWorkerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public getPayRatesByWorkerId(requestParameters: WorkerApiGetPayRatesByWorkerIdRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).getPayRatesByWorkerId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Information about a workers compensation pay standards.
     * @summary Worker Pay Standards
     * @param {WorkerApiGetPayStandardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public getPayStandards(requestParameters: WorkerApiGetPayStandardsRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).getPayStandards(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Array of time off balance(s) a worker has for each policy type of time off, for that worker. NOTE: This data is only available if the client has the Time Off Accrual product (This is not related to the Flex Time product which has it is own dev portal for those APIs).
     * @summary Worker Time Off
     * @param {WorkerApiGetTimeOffBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public getTimeOffBalance(requestParameters: WorkerApiGetTimeOffBalanceRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).getTimeOffBalance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the full list of worker statuses (past, present, and future). For each status the workerStatusId is the value of the corresponding company worker status ID. If no company worker status with a matching type/reason exists then workerStatusId is omitted. If multiple statuses share an effective date the order field will indicate the order in which they were posted.
     * @summary Worker Statuses
     * @param {WorkerApiGetWorkerStatusListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public getWorkerStatusList(requestParameters: WorkerApiGetWorkerStatusListRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).getWorkerStatusList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Array of assignments that will be used for auto distribution assigned to the worker.
     * @summary Worker Assignments
     * @param {WorkerApiListAssignmentDistributionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public listAssignmentDistributions(requestParameters: WorkerApiListAssignmentDistributionsRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).listAssignmentDistributions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Array of direct deposits on the \"Active\" worker.
     * @summary Worker Direct Deposits
     * @param {WorkerApiListDirectDepositsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public listDirectDeposits(requestParameters: WorkerApiListDirectDepositsRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).listDirectDeposits(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a communication item from a \"Active\" or \"In-progress\" worker.
     * @summary Worker Communication
     * @param {WorkerApiRemoveCommunicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public removeCommunication(requestParameters: WorkerApiRemoveCommunicationRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).removeCommunication(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a single direct deposit for a \"Active\" worker.
     * @summary Worker Direct Deposit
     * @param {WorkerApiRemoveDirectDepositRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public removeDirectDeposit(requestParameters: WorkerApiRemoveDirectDepositRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).removeDirectDeposit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the federal tax setup for an \"In-progress\" worker.
     * @summary Worker Federal Tax
     * @param {WorkerApiRemoveFederalTaxRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public removeFederalTax(requestParameters: WorkerApiRemoveFederalTaxRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).removeFederalTax(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a specific pay component that a \"Active\" worker has.
     * @summary Worker Pay Component
     * @param {WorkerApiRemovePayComponentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public removePayComponent(requestParameters: WorkerApiRemovePayComponentRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).removePayComponent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a compensation rate from a worker.
     * @summary Worker Pay Rate
     * @param {WorkerApiRemovePayRateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public removePayRate(requestParameters: WorkerApiRemovePayRateRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).removePayRate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a \"Active\" or \"In-progress\" workers specific communication item.
     * @summary Worker Communication
     * @param {WorkerApiUpdateCommunicationItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public updateCommunicationItem(requestParameters: WorkerApiUpdateCommunicationItemRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).updateCommunicationItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a workers specific compensation rate.
     * @summary Worker Pay Rate
     * @param {WorkerApiUpdateCompensationRateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public updateCompensationRate(requestParameters: WorkerApiUpdateCompensationRateRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).updateCompensationRate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a worker contact. A contact may represent a person or entity (organization) but not both. A contact must have at least one communication (telecom, postal, or email). Person contacts can have multiple communications for each communication type (telecom, postal, or email) to support BUSINESS and PERSONAL. Exactly one contact must be marked as primary for each contact type. When a new contact is made primary the previous primary contact will be marked as not primary. A postal contact can be switched from a street address to a PO box and vice versa. This is done by setting either streetLineOne or postOfficeBox (a postal communication may not have both). Use the GET /companies/{companyId}/contacttypes endpoint to get a full list of available contact types and relationship types (used for person contacts).
     * @summary Worker Contacts
     * @param {WorkerApiUpdateContactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public updateContact(requestParameters: WorkerApiUpdateContactRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).updateContact(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update CustomField at the worker level
     * @summary Worker CustomField
     * @param {WorkerApiUpdateCustomFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public updateCustomField(requestParameters: WorkerApiUpdateCustomFieldRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).updateCustomField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a single direct deposit for a an \"Active\" worker.
     * @summary Worker Direct Deposit
     * @param {WorkerApiUpdateDirectDepositRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public updateDirectDeposit(requestParameters: WorkerApiUpdateDirectDepositRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).updateDirectDeposit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update multiple direct deposits of an \"Active\" Worker at a time.
     * @summary Worker Direct Deposits
     * @param {WorkerApiUpdateDirectDepositsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public updateDirectDeposits(requestParameters: WorkerApiUpdateDirectDepositsRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).updateDirectDeposits(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the federal tax setup for a \"Active\" or \"In-progress\" worker.
     * @summary Worker Federal Tax
     * @param {WorkerApiUpdateFederalTaxSetupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public updateFederalTaxSetup(requestParameters: WorkerApiUpdateFederalTaxSetupRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).updateFederalTaxSetup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Update a single pay component associated to the \"Active\" worker.
     * @summary Worker Pay Component
     * @param {WorkerApiUpdatePayComponentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public updatePayComponent(requestParameters: WorkerApiUpdatePayComponentRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).updatePayComponent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Batch update pay components associated to the \"Active\" worker.
     * @summary Worker Pay Components
     * @param {WorkerApiUpdatePayComponentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public updatePayComponents(requestParameters: WorkerApiUpdatePayComponentsRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).updatePayComponents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a unique worker (employee and contractor) that your application has been granted access to modify.
     * @summary Worker
     * @param {WorkerApiUpdateUniqueWorkerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkerApiGenerated
     */
    public updateUniqueWorker(requestParameters: WorkerApiUpdateUniqueWorkerRequest, options?: AxiosRequestConfig) {
        return WorkerApiFp(this.configuration).updateUniqueWorker(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
