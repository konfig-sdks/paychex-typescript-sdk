/* tslint:disable */
/* eslint-disable */
/*
External API



# Developer Resources
 Refer
[Developer Resources](https://developer.paychex.com/resources/overview/) for more details on API specification 

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CheckResource } from '../models';
// @ts-ignore
import { CheckResource1 } from '../models';
// @ts-ignore
import { CheckResource2 } from '../models';
// @ts-ignore
import { ErrorResource } from '../models';
// @ts-ignore
import { Link } from '../models';
// @ts-ignore
import { PayComponentResource } from '../models';
// @ts-ignore
import { PayComponentResource1 } from '../models';
// @ts-ignore
import { PayComponentResource2 } from '../models';
// @ts-ignore
import { PayPeriodResource } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PayrollApi - axios parameter creator
 * @export
 */
export const PayrollApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a check for one or more worker within a company for an available pay period.
         * @summary Company Checks
         * @param {string} companyId ID associated with desired company.
         * @param {CheckResource} checkResource 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCompanyChecks: async (companyId: string, checkResource: CheckResource, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('addCompanyChecks', 'companyId', companyId)
            // verify required parameter 'checkResource' is not null or undefined
            assertParamExists('addCompanyChecks', 'checkResource', checkResource)
            const localVarPath = `/companies/{companyId}/checks`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/vnd.paychex.payroll.checks.v1+json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checkResource,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/checks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checkResource, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new pay component on an individual unprocessed check.
         * @summary Pay Component to a check.
         * @param {string} checkId ID associated with desired check.
         * @param {PayComponentResource2} payComponentResource2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPayComponentToCheck: async (checkId: string, payComponentResource2: PayComponentResource2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'checkId' is not null or undefined
            assertParamExists('addPayComponentToCheck', 'checkId', checkId)
            // verify required parameter 'payComponentResource2' is not null or undefined
            assertParamExists('addPayComponentToCheck', 'payComponentResource2', payComponentResource2)
            const localVarPath = `/checks/{checkId}/checkcomponents`
                .replace(`{${"checkId"}}`, encodeURIComponent(String(checkId !== undefined ? checkId : `-checkId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payComponentResource2,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checks/{checkId}/checkcomponents',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payComponentResource2, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a check to a worker for an unprocessed pay period.
         * @summary Worker Check
         * @param {string} workerId ID associated with desired worker.
         * @param {CheckResource1} checkResource1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWorkerCheck: async (workerId: string, checkResource1: CheckResource1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('addWorkerCheck', 'workerId', workerId)
            // verify required parameter 'checkResource1' is not null or undefined
            assertParamExists('addWorkerCheck', 'checkResource1', checkResource1)
            const localVarPath = `/workers/{workerId}/checks`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checkResource1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/checks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checkResource1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete checks by pay period Id and user Id.
         * @summary Checks by Pay Period and User
         * @param {string} payperiodid ID associated with desired pay period.
         * @param {boolean} deletebyuserid Value for deletebyuserid parameter should be \&quot;true\&quot; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChecksByPayPeriodAndUser: async (payperiodid: string, deletebyuserid: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payperiodid' is not null or undefined
            assertParamExists('deleteChecksByPayPeriodAndUser', 'payperiodid', payperiodid)
            // verify required parameter 'deletebyuserid' is not null or undefined
            assertParamExists('deleteChecksByPayPeriodAndUser', 'deletebyuserid', deletebyuserid)
            const localVarPath = `/checks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (payperiodid !== undefined) {
                localVarQueryParameter['payperiodid'] = payperiodid;
            }

            if (deletebyuserid !== undefined) {
                localVarQueryParameter['deletebyuserid'] = deletebyuserid;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checks',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get check(s) that are for a specific company within a processed or unprocessed pay period.
         * @summary Company Checks
         * @param {string} companyId ID associated with desired company.
         * @param {string} payperiodid The id assigned to the pay period that the check will be within.
         * @param {number} [offset] The zero based offset of the next page of data to be presented.
         * @param {number} [limit] The maximum number of elements to be returned in a page transition.
         * @param {boolean} [filterbyuserid] Filter by User Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyChecksByPayPeriod: async (companyId: string, payperiodid: string, offset?: number, limit?: number, filterbyuserid?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompanyChecksByPayPeriod', 'companyId', companyId)
            // verify required parameter 'payperiodid' is not null or undefined
            assertParamExists('getCompanyChecksByPayPeriod', 'payperiodid', payperiodid)
            const localVarPath = `/companies/{companyId}/checks`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (payperiodid !== undefined) {
                localVarQueryParameter['payperiodid'] = payperiodid;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (filterbyuserid !== undefined) {
                localVarQueryParameter['filterbyuserid'] = filterbyuserid;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/checks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pay component associated with the company.
         * @summary Company Pay Component
         * @param {string} companyId The id assigned to the company that is being requested for.
         * @param {string} paycomponentId The unique identifier used to identify a pay component.
         * @param {string} [asof] Returns PayComponent as of the date used in the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyPayComponent: async (companyId: string, paycomponentId: string, asof?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompanyPayComponent', 'companyId', companyId)
            // verify required parameter 'paycomponentId' is not null or undefined
            assertParamExists('getCompanyPayComponent', 'paycomponentId', paycomponentId)
            const localVarPath = `/companies/{companyId}/paycomponents/{paycomponentId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"paycomponentId"}}`, encodeURIComponent(String(paycomponentId !== undefined ? paycomponentId : `-paycomponentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (asof !== undefined) {
                localVarQueryParameter['asof'] = asof;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/paycomponents/{paycomponentId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Array of pay components that are configured for a company. Pay components are earnings and deductions which are used for payroll.
         * @summary Company Pay Components
         * @param {string} companyId The id assigned to the company that is being requested for.
         * @param {string} [effectonpay] The type of effect on pay that you are requested for.
         * @param {string} [asof] Returns all PayComponent\&#39;s as of the date used in the request.
         * @param {string} [classificationtype] The category that this component falls into. (such as  EARNINGS  or   SICK_PAY )
         * @param {string} [name] The name of a pay component that a company has.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyPayComponents: async (companyId: string, effectonpay?: string, asof?: string, classificationtype?: string, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompanyPayComponents', 'companyId', companyId)
            const localVarPath = `/companies/{companyId}/paycomponents`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectonpay !== undefined) {
                localVarQueryParameter['effectonpay'] = effectonpay;
            }

            if (asof !== undefined) {
                localVarQueryParameter['asof'] = asof;
            }

            if (classificationtype !== undefined) {
                localVarQueryParameter['classificationtype'] = classificationtype;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/paycomponents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Array of pay periods associated with the company.
         * @summary Company Pay Periods
         * @param {string} companyId The id assigned to the company that is being requested for.
         * @param {Array<string>} [status] Get PayPeriods that are in List of specific status.
         * @param {string} [from] The beginning of the search date range using the Payperiod start date.
         * @param {string} [to] The ending of the search date range using the Payperiod end date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyPayPeriods: async (companyId: string, status?: Array<string>, from?: string, to?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getCompanyPayPeriods', 'companyId', companyId)
            const localVarPath = `/companies/{companyId}/payperiods`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (status) {
                localVarQueryParameter['status'] = status;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/payperiods',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A single pay period.
         * @summary Company Pay Period
         * @param {string} companyId The id assigned to the company that is being requested for.
         * @param {string} payperiodId The id assigned to the PayPeriod you are looking for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayPeriod: async (companyId: string, payperiodId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getPayPeriod', 'companyId', companyId)
            // verify required parameter 'payperiodId' is not null or undefined
            assertParamExists('getPayPeriod', 'payperiodId', payperiodId)
            const localVarPath = `/companies/{companyId}/payperiods/{payperiodId}`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"payperiodId"}}`, encodeURIComponent(String(payperiodId !== undefined ? payperiodId : `-payperiodId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/companies/{companyId}/payperiods/{payperiodId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific unprocessed or processed check that a worker has.
         * @summary Worker Check
         * @param {string} workerId ID associated with desired worker.
         * @param {string} paycheckId The id of a single check that a workers has.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkerCheck: async (workerId: string, paycheckId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getWorkerCheck', 'workerId', workerId)
            // verify required parameter 'paycheckId' is not null or undefined
            assertParamExists('getWorkerCheck', 'paycheckId', paycheckId)
            const localVarPath = `/workers/{workerId}/checks/{externalCheckId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"paycheckId"}}`, encodeURIComponent(String(paycheckId !== undefined ? paycheckId : `-paycheckId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/checks/{externalCheckId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get check(s) that are for a specific worker   within a processed or unprocessed pay period.
         * @summary Worker Checks
         * @param {string} workerId ID associated with desired worker.
         * @param {string} payperiodid The id assigned to the pay period that the  check will be within.
         * @param {boolean} [filterbyuserid] Filter by User Id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkerChecksByPayPeriod: async (workerId: string, payperiodid: string, filterbyuserid?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('getWorkerChecksByPayPeriod', 'workerId', workerId)
            // verify required parameter 'payperiodid' is not null or undefined
            assertParamExists('getWorkerChecksByPayPeriod', 'payperiodid', payperiodid)
            const localVarPath = `/workers/{workerId}/checks`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (payperiodid !== undefined) {
                localVarQueryParameter['payperiodid'] = payperiodid;
            }

            if (filterbyuserid !== undefined) {
                localVarQueryParameter['filterbyuserid'] = filterbyuserid;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/checks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a single pay component on an individual unprocessed check.
         * @summary Pay Component of a check
         * @param {string} checkId ID associated with desired check.
         * @param {string} checkComponentId ID associated with an Earning of this check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePayComponent: async (checkId: string, checkComponentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'checkId' is not null or undefined
            assertParamExists('removePayComponent', 'checkId', checkId)
            // verify required parameter 'checkComponentId' is not null or undefined
            assertParamExists('removePayComponent', 'checkComponentId', checkComponentId)
            const localVarPath = `/checks/{checkId}/checkcomponents/{checkComponentId}`
                .replace(`{${"checkId"}}`, encodeURIComponent(String(checkId !== undefined ? checkId : `-checkId-`)))
                .replace(`{${"checkComponentId"}}`, encodeURIComponent(String(checkComponentId !== undefined ? checkComponentId : `-checkComponentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checks/{checkId}/checkcomponents/{checkComponentId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a specific unprocessed check that a worker has.
         * @summary Worker Check
         * @param {string} workerId ID associated with desired worker.
         * @param {string} paycheckId The id of a single check that a workers has.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeWorkerCheck: async (workerId: string, paycheckId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workerId' is not null or undefined
            assertParamExists('removeWorkerCheck', 'workerId', workerId)
            // verify required parameter 'paycheckId' is not null or undefined
            assertParamExists('removeWorkerCheck', 'paycheckId', paycheckId)
            const localVarPath = `/workers/{workerId}/checks/{externalCheckId}`
                .replace(`{${"workerId"}}`, encodeURIComponent(String(workerId !== undefined ? workerId : `-workerId-`)))
                .replace(`{${"paycheckId"}}`, encodeURIComponent(String(paycheckId !== undefined ? paycheckId : `-paycheckId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{workerId}/checks/{externalCheckId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Update a single pay component on an individual unprocessed check.
         * @summary Pay Component of a Check
         * @param {string} checkId ID associated with desired check.
         * @param {string} checkComponentId ID associated with an Earning of this check
         * @param {PayComponentResource2} payComponentResource2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayComponent: async (checkId: string, checkComponentId: string, payComponentResource2: PayComponentResource2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'checkId' is not null or undefined
            assertParamExists('updatePayComponent', 'checkId', checkId)
            // verify required parameter 'checkComponentId' is not null or undefined
            assertParamExists('updatePayComponent', 'checkComponentId', checkComponentId)
            // verify required parameter 'payComponentResource2' is not null or undefined
            assertParamExists('updatePayComponent', 'payComponentResource2', payComponentResource2)
            const localVarPath = `/checks/{checkId}/checkcomponents/{checkComponentId}`
                .replace(`{${"checkId"}}`, encodeURIComponent(String(checkId !== undefined ? checkId : `-checkId-`)))
                .replace(`{${"checkComponentId"}}`, encodeURIComponent(String(checkComponentId !== undefined ? checkComponentId : `-checkComponentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payComponentResource2,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/checks/{checkId}/checkcomponents/{checkComponentId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payComponentResource2, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayrollApi - functional programming interface
 * @export
 */
export const PayrollApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayrollApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a check for one or more worker within a company for an available pay period.
         * @summary Company Checks
         * @param {PayrollApiAddCompanyChecksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCompanyChecks(requestParameters: PayrollApiAddCompanyChecksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckResource>> {
            const checkResource: CheckResource = {
                workerId: requestParameters.workerId,
                paycheckId: requestParameters.paycheckId,
                payPeriodId: requestParameters.payPeriodId,
                checkCorrelationId: requestParameters.checkCorrelationId,
                blockAutoDistribution: requestParameters.blockAutoDistribution,
                earnings: requestParameters.earnings,
                deductions: requestParameters.deductions,
                checkDate: requestParameters.checkDate,
                informational: requestParameters.informational,
                taxes: requestParameters.taxes,
                links: requestParameters.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCompanyChecks(requestParameters.companyId, checkResource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new pay component on an individual unprocessed check.
         * @summary Pay Component to a check.
         * @param {PayrollApiAddPayComponentToCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPayComponentToCheck(requestParameters: PayrollApiAddPayComponentToCheckRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckResource2>> {
            const payComponentResource2: PayComponentResource2 = {
                description: requestParameters.description,
                componentId: requestParameters.componentId,
                checkComponentId: requestParameters.checkComponentId,
                name: requestParameters.name,
                classificationType: requestParameters.classificationType,
                effectOnPay: requestParameters.effectOnPay,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate,
                appliesToWorkerTypes: requestParameters.appliesToWorkerTypes,
                jobId: requestParameters.jobId,
                laborAssignmentId: requestParameters.laborAssignmentId,
                payRateId: requestParameters.payRateId,
                payRate: requestParameters.payRate,
                payHours: requestParameters.payHours,
                payUnits: requestParameters.payUnits,
                payAmount: requestParameters.payAmount,
                memoed: requestParameters.memoed,
                lineDate: requestParameters.lineDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPayComponentToCheck(requestParameters.checkId, payComponentResource2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a check to a worker for an unprocessed pay period.
         * @summary Worker Check
         * @param {PayrollApiAddWorkerCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addWorkerCheck(requestParameters: PayrollApiAddWorkerCheckRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckResource1>> {
            const checkResource1: CheckResource1 = {
                workerId: requestParameters.requestBody.workerId,
                paycheckId: requestParameters.requestBody.paycheckId,
                payPeriodId: requestParameters.requestBody.payPeriodId,
                checkCorrelationId: requestParameters.requestBody.checkCorrelationId,
                blockAutoDistribution: requestParameters.requestBody.blockAutoDistribution,
                earnings: requestParameters.requestBody.earnings,
                deductions: requestParameters.requestBody.deductions,
                informational: requestParameters.requestBody.informational,
                taxes: requestParameters.requestBody.taxes
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addWorkerCheck(requestParameters.workerId, checkResource1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete checks by pay period Id and user Id.
         * @summary Checks by Pay Period and User
         * @param {PayrollApiDeleteChecksByPayPeriodAndUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChecksByPayPeriodAndUser(requestParameters: PayrollApiDeleteChecksByPayPeriodAndUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChecksByPayPeriodAndUser(requestParameters.payperiodid, requestParameters.deletebyuserid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get check(s) that are for a specific company within a processed or unprocessed pay period.
         * @summary Company Checks
         * @param {PayrollApiGetCompanyChecksByPayPeriodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyChecksByPayPeriod(requestParameters: PayrollApiGetCompanyChecksByPayPeriodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyChecksByPayPeriod(requestParameters.companyId, requestParameters.payperiodid, requestParameters.offset, requestParameters.limit, requestParameters.filterbyuserid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Pay component associated with the company.
         * @summary Company Pay Component
         * @param {PayrollApiGetCompanyPayComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyPayComponent(requestParameters: PayrollApiGetCompanyPayComponentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayComponentResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyPayComponent(requestParameters.companyId, requestParameters.paycomponentId, requestParameters.asof, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Array of pay components that are configured for a company. Pay components are earnings and deductions which are used for payroll.
         * @summary Company Pay Components
         * @param {PayrollApiGetCompanyPayComponentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyPayComponents(requestParameters: PayrollApiGetCompanyPayComponentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayComponentResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyPayComponents(requestParameters.companyId, requestParameters.effectonpay, requestParameters.asof, requestParameters.classificationtype, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Array of pay periods associated with the company.
         * @summary Company Pay Periods
         * @param {PayrollApiGetCompanyPayPeriodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyPayPeriods(requestParameters: PayrollApiGetCompanyPayPeriodsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPeriodResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyPayPeriods(requestParameters.companyId, requestParameters.status, requestParameters.from, requestParameters.to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A single pay period.
         * @summary Company Pay Period
         * @param {PayrollApiGetPayPeriodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayPeriod(requestParameters: PayrollApiGetPayPeriodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayPeriodResource>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayPeriod(requestParameters.companyId, requestParameters.payperiodId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a specific unprocessed or processed check that a worker has.
         * @summary Worker Check
         * @param {PayrollApiGetWorkerCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkerCheck(requestParameters: PayrollApiGetWorkerCheckRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckResource1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkerCheck(requestParameters.workerId, requestParameters.paycheckId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get check(s) that are for a specific worker   within a processed or unprocessed pay period.
         * @summary Worker Checks
         * @param {PayrollApiGetWorkerChecksByPayPeriodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkerChecksByPayPeriod(requestParameters: PayrollApiGetWorkerChecksByPayPeriodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckResource1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkerChecksByPayPeriod(requestParameters.workerId, requestParameters.payperiodid, requestParameters.filterbyuserid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a single pay component on an individual unprocessed check.
         * @summary Pay Component of a check
         * @param {PayrollApiRemovePayComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePayComponent(requestParameters: PayrollApiRemovePayComponentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePayComponent(requestParameters.checkId, requestParameters.checkComponentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a specific unprocessed check that a worker has.
         * @summary Worker Check
         * @param {PayrollApiRemoveWorkerCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeWorkerCheck(requestParameters: PayrollApiRemoveWorkerCheckRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckResource1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeWorkerCheck(requestParameters.workerId, requestParameters.paycheckId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Update a single pay component on an individual unprocessed check.
         * @summary Pay Component of a Check
         * @param {PayrollApiUpdatePayComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePayComponent(requestParameters: PayrollApiUpdatePayComponentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayComponentResource2>> {
            const payComponentResource2: PayComponentResource2 = {
                description: requestParameters.requestBody.description,
                componentId: requestParameters.requestBody.componentId,
                checkComponentId: requestParameters.requestBody.checkComponentId,
                name: requestParameters.requestBody.name,
                classificationType: requestParameters.requestBody.classificationType,
                effectOnPay: requestParameters.requestBody.effectOnPay,
                startDate: requestParameters.requestBody.startDate,
                endDate: requestParameters.requestBody.endDate,
                appliesToWorkerTypes: requestParameters.requestBody.appliesToWorkerTypes,
                jobId: requestParameters.requestBody.jobId,
                laborAssignmentId: requestParameters.requestBody.laborAssignmentId,
                payRateId: requestParameters.requestBody.payRateId,
                payRate: requestParameters.requestBody.payRate,
                payHours: requestParameters.requestBody.payHours,
                payUnits: requestParameters.requestBody.payUnits,
                payAmount: requestParameters.requestBody.payAmount,
                memoed: requestParameters.requestBody.memoed,
                lineDate: requestParameters.requestBody.lineDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePayComponent(requestParameters.checkId, requestParameters.checkComponentId, payComponentResource2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PayrollApi - factory interface
 * @export
 */
export const PayrollApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayrollApiFp(configuration)
    return {
        /**
         * Add a check for one or more worker within a company for an available pay period.
         * @summary Company Checks
         * @param {PayrollApiAddCompanyChecksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCompanyChecks(requestParameters: PayrollApiAddCompanyChecksRequest, options?: AxiosRequestConfig): AxiosPromise<CheckResource> {
            return localVarFp.addCompanyChecks(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new pay component on an individual unprocessed check.
         * @summary Pay Component to a check.
         * @param {PayrollApiAddPayComponentToCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPayComponentToCheck(requestParameters: PayrollApiAddPayComponentToCheckRequest, options?: AxiosRequestConfig): AxiosPromise<CheckResource2> {
            return localVarFp.addPayComponentToCheck(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a check to a worker for an unprocessed pay period.
         * @summary Worker Check
         * @param {PayrollApiAddWorkerCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addWorkerCheck(requestParameters: PayrollApiAddWorkerCheckRequest, options?: AxiosRequestConfig): AxiosPromise<CheckResource1> {
            return localVarFp.addWorkerCheck(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete checks by pay period Id and user Id.
         * @summary Checks by Pay Period and User
         * @param {PayrollApiDeleteChecksByPayPeriodAndUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChecksByPayPeriodAndUser(requestParameters: PayrollApiDeleteChecksByPayPeriodAndUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteChecksByPayPeriodAndUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get check(s) that are for a specific company within a processed or unprocessed pay period.
         * @summary Company Checks
         * @param {PayrollApiGetCompanyChecksByPayPeriodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyChecksByPayPeriod(requestParameters: PayrollApiGetCompanyChecksByPayPeriodRequest, options?: AxiosRequestConfig): AxiosPromise<CheckResource> {
            return localVarFp.getCompanyChecksByPayPeriod(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Pay component associated with the company.
         * @summary Company Pay Component
         * @param {PayrollApiGetCompanyPayComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyPayComponent(requestParameters: PayrollApiGetCompanyPayComponentRequest, options?: AxiosRequestConfig): AxiosPromise<PayComponentResource> {
            return localVarFp.getCompanyPayComponent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Array of pay components that are configured for a company. Pay components are earnings and deductions which are used for payroll.
         * @summary Company Pay Components
         * @param {PayrollApiGetCompanyPayComponentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyPayComponents(requestParameters: PayrollApiGetCompanyPayComponentsRequest, options?: AxiosRequestConfig): AxiosPromise<PayComponentResource> {
            return localVarFp.getCompanyPayComponents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Array of pay periods associated with the company.
         * @summary Company Pay Periods
         * @param {PayrollApiGetCompanyPayPeriodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyPayPeriods(requestParameters: PayrollApiGetCompanyPayPeriodsRequest, options?: AxiosRequestConfig): AxiosPromise<PayPeriodResource> {
            return localVarFp.getCompanyPayPeriods(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A single pay period.
         * @summary Company Pay Period
         * @param {PayrollApiGetPayPeriodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayPeriod(requestParameters: PayrollApiGetPayPeriodRequest, options?: AxiosRequestConfig): AxiosPromise<PayPeriodResource> {
            return localVarFp.getPayPeriod(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific unprocessed or processed check that a worker has.
         * @summary Worker Check
         * @param {PayrollApiGetWorkerCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkerCheck(requestParameters: PayrollApiGetWorkerCheckRequest, options?: AxiosRequestConfig): AxiosPromise<CheckResource1> {
            return localVarFp.getWorkerCheck(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get check(s) that are for a specific worker   within a processed or unprocessed pay period.
         * @summary Worker Checks
         * @param {PayrollApiGetWorkerChecksByPayPeriodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkerChecksByPayPeriod(requestParameters: PayrollApiGetWorkerChecksByPayPeriodRequest, options?: AxiosRequestConfig): AxiosPromise<CheckResource1> {
            return localVarFp.getWorkerChecksByPayPeriod(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a single pay component on an individual unprocessed check.
         * @summary Pay Component of a check
         * @param {PayrollApiRemovePayComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePayComponent(requestParameters: PayrollApiRemovePayComponentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removePayComponent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a specific unprocessed check that a worker has.
         * @summary Worker Check
         * @param {PayrollApiRemoveWorkerCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeWorkerCheck(requestParameters: PayrollApiRemoveWorkerCheckRequest, options?: AxiosRequestConfig): AxiosPromise<CheckResource1> {
            return localVarFp.removeWorkerCheck(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         *  Update a single pay component on an individual unprocessed check.
         * @summary Pay Component of a Check
         * @param {PayrollApiUpdatePayComponentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePayComponent(requestParameters: PayrollApiUpdatePayComponentRequest, options?: AxiosRequestConfig): AxiosPromise<PayComponentResource2> {
            return localVarFp.updatePayComponent(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addCompanyChecks operation in PayrollApi.
 * @export
 * @interface PayrollApiAddCompanyChecksRequest
 */
export type PayrollApiAddCompanyChecksRequest = {
    
    /**
    * ID associated with desired company.
    * @type {string}
    * @memberof PayrollApiAddCompanyChecks
    */
    readonly companyId: string
    
} & CheckResource

/**
 * Request parameters for addPayComponentToCheck operation in PayrollApi.
 * @export
 * @interface PayrollApiAddPayComponentToCheckRequest
 */
export type PayrollApiAddPayComponentToCheckRequest = {
    
    /**
    * ID associated with desired check.
    * @type {string}
    * @memberof PayrollApiAddPayComponentToCheck
    */
    readonly checkId: string
    
} & PayComponentResource2

/**
 * Request parameters for addWorkerCheck operation in PayrollApi.
 * @export
 * @interface PayrollApiAddWorkerCheckRequest
 */
export type PayrollApiAddWorkerCheckRequest = {
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof PayrollApiAddWorkerCheck
    */
    readonly workerId: string
    /**
    * 
    * @type {CheckResource1}
    * @memberof PayrollApiAddWorkerCheck
    */
    readonly requestBody: CheckResource1
}

/**
 * Request parameters for deleteChecksByPayPeriodAndUser operation in PayrollApi.
 * @export
 * @interface PayrollApiDeleteChecksByPayPeriodAndUserRequest
 */
export type PayrollApiDeleteChecksByPayPeriodAndUserRequest = {
    
    /**
    * ID associated with desired pay period.
    * @type {string}
    * @memberof PayrollApiDeleteChecksByPayPeriodAndUser
    */
    readonly payperiodid: string
    
    /**
    * Value for deletebyuserid parameter should be \"true\" 
    * @type {boolean}
    * @memberof PayrollApiDeleteChecksByPayPeriodAndUser
    */
    readonly deletebyuserid: boolean
    
}

/**
 * Request parameters for getCompanyChecksByPayPeriod operation in PayrollApi.
 * @export
 * @interface PayrollApiGetCompanyChecksByPayPeriodRequest
 */
export type PayrollApiGetCompanyChecksByPayPeriodRequest = {
    
    /**
    * ID associated with desired company.
    * @type {string}
    * @memberof PayrollApiGetCompanyChecksByPayPeriod
    */
    readonly companyId: string
    
    /**
    * The id assigned to the pay period that the check will be within.
    * @type {string}
    * @memberof PayrollApiGetCompanyChecksByPayPeriod
    */
    readonly payperiodid: string
    
    /**
    * The zero based offset of the next page of data to be presented.
    * @type {number}
    * @memberof PayrollApiGetCompanyChecksByPayPeriod
    */
    readonly offset?: number
    
    /**
    * The maximum number of elements to be returned in a page transition.
    * @type {number}
    * @memberof PayrollApiGetCompanyChecksByPayPeriod
    */
    readonly limit?: number
    
    /**
    * Filter by User Id.
    * @type {boolean}
    * @memberof PayrollApiGetCompanyChecksByPayPeriod
    */
    readonly filterbyuserid?: boolean
    
}

/**
 * Request parameters for getCompanyPayComponent operation in PayrollApi.
 * @export
 * @interface PayrollApiGetCompanyPayComponentRequest
 */
export type PayrollApiGetCompanyPayComponentRequest = {
    
    /**
    * The id assigned to the company that is being requested for.
    * @type {string}
    * @memberof PayrollApiGetCompanyPayComponent
    */
    readonly companyId: string
    
    /**
    * The unique identifier used to identify a pay component.
    * @type {string}
    * @memberof PayrollApiGetCompanyPayComponent
    */
    readonly paycomponentId: string
    
    /**
    * Returns PayComponent as of the date used in the request.
    * @type {string}
    * @memberof PayrollApiGetCompanyPayComponent
    */
    readonly asof?: string
    
}

/**
 * Request parameters for getCompanyPayComponents operation in PayrollApi.
 * @export
 * @interface PayrollApiGetCompanyPayComponentsRequest
 */
export type PayrollApiGetCompanyPayComponentsRequest = {
    
    /**
    * The id assigned to the company that is being requested for.
    * @type {string}
    * @memberof PayrollApiGetCompanyPayComponents
    */
    readonly companyId: string
    
    /**
    * The type of effect on pay that you are requested for.
    * @type {string}
    * @memberof PayrollApiGetCompanyPayComponents
    */
    readonly effectonpay?: string
    
    /**
    * Returns all PayComponent\'s as of the date used in the request.
    * @type {string}
    * @memberof PayrollApiGetCompanyPayComponents
    */
    readonly asof?: string
    
    /**
    * The category that this component falls into. (such as  EARNINGS  or   SICK_PAY )
    * @type {string}
    * @memberof PayrollApiGetCompanyPayComponents
    */
    readonly classificationtype?: string
    
    /**
    * The name of a pay component that a company has.
    * @type {string}
    * @memberof PayrollApiGetCompanyPayComponents
    */
    readonly name?: string
    
}

/**
 * Request parameters for getCompanyPayPeriods operation in PayrollApi.
 * @export
 * @interface PayrollApiGetCompanyPayPeriodsRequest
 */
export type PayrollApiGetCompanyPayPeriodsRequest = {
    
    /**
    * The id assigned to the company that is being requested for.
    * @type {string}
    * @memberof PayrollApiGetCompanyPayPeriods
    */
    readonly companyId: string
    
    /**
    * Get PayPeriods that are in List of specific status.
    * @type {Array<string>}
    * @memberof PayrollApiGetCompanyPayPeriods
    */
    readonly status?: Array<string>
    
    /**
    * The beginning of the search date range using the Payperiod start date.
    * @type {string}
    * @memberof PayrollApiGetCompanyPayPeriods
    */
    readonly from?: string
    
    /**
    * The ending of the search date range using the Payperiod end date.
    * @type {string}
    * @memberof PayrollApiGetCompanyPayPeriods
    */
    readonly to?: string
    
}

/**
 * Request parameters for getPayPeriod operation in PayrollApi.
 * @export
 * @interface PayrollApiGetPayPeriodRequest
 */
export type PayrollApiGetPayPeriodRequest = {
    
    /**
    * The id assigned to the company that is being requested for.
    * @type {string}
    * @memberof PayrollApiGetPayPeriod
    */
    readonly companyId: string
    
    /**
    * The id assigned to the PayPeriod you are looking for.
    * @type {string}
    * @memberof PayrollApiGetPayPeriod
    */
    readonly payperiodId: string
    
}

/**
 * Request parameters for getWorkerCheck operation in PayrollApi.
 * @export
 * @interface PayrollApiGetWorkerCheckRequest
 */
export type PayrollApiGetWorkerCheckRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof PayrollApiGetWorkerCheck
    */
    readonly workerId: string
    
    /**
    * The id of a single check that a workers has.
    * @type {string}
    * @memberof PayrollApiGetWorkerCheck
    */
    readonly paycheckId: string
    
}

/**
 * Request parameters for getWorkerChecksByPayPeriod operation in PayrollApi.
 * @export
 * @interface PayrollApiGetWorkerChecksByPayPeriodRequest
 */
export type PayrollApiGetWorkerChecksByPayPeriodRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof PayrollApiGetWorkerChecksByPayPeriod
    */
    readonly workerId: string
    
    /**
    * The id assigned to the pay period that the  check will be within.
    * @type {string}
    * @memberof PayrollApiGetWorkerChecksByPayPeriod
    */
    readonly payperiodid: string
    
    /**
    * Filter by User Id.
    * @type {boolean}
    * @memberof PayrollApiGetWorkerChecksByPayPeriod
    */
    readonly filterbyuserid?: boolean
    
}

/**
 * Request parameters for removePayComponent operation in PayrollApi.
 * @export
 * @interface PayrollApiRemovePayComponentRequest
 */
export type PayrollApiRemovePayComponentRequest = {
    
    /**
    * ID associated with desired check.
    * @type {string}
    * @memberof PayrollApiRemovePayComponent
    */
    readonly checkId: string
    
    /**
    * ID associated with an Earning of this check
    * @type {string}
    * @memberof PayrollApiRemovePayComponent
    */
    readonly checkComponentId: string
    
}

/**
 * Request parameters for removeWorkerCheck operation in PayrollApi.
 * @export
 * @interface PayrollApiRemoveWorkerCheckRequest
 */
export type PayrollApiRemoveWorkerCheckRequest = {
    
    /**
    * ID associated with desired worker.
    * @type {string}
    * @memberof PayrollApiRemoveWorkerCheck
    */
    readonly workerId: string
    
    /**
    * The id of a single check that a workers has.
    * @type {string}
    * @memberof PayrollApiRemoveWorkerCheck
    */
    readonly paycheckId: string
    
}

/**
 * Request parameters for updatePayComponent operation in PayrollApi.
 * @export
 * @interface PayrollApiUpdatePayComponentRequest
 */
export type PayrollApiUpdatePayComponentRequest = {
    /**
    * ID associated with desired check.
    * @type {string}
    * @memberof PayrollApiUpdatePayComponent
    */
    readonly checkId: string
    /**
    * ID associated with an Earning of this check
    * @type {string}
    * @memberof PayrollApiUpdatePayComponent
    */
    readonly checkComponentId: string
    /**
    * 
    * @type {PayComponentResource2}
    * @memberof PayrollApiUpdatePayComponent
    */
    readonly requestBody: PayComponentResource2
}

/**
 * PayrollApiGenerated - object-oriented interface
 * @export
 * @class PayrollApiGenerated
 * @extends {BaseAPI}
 */
export class PayrollApiGenerated extends BaseAPI {
    /**
     * Add a check for one or more worker within a company for an available pay period.
     * @summary Company Checks
     * @param {PayrollApiAddCompanyChecksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public addCompanyChecks(requestParameters: PayrollApiAddCompanyChecksRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).addCompanyChecks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new pay component on an individual unprocessed check.
     * @summary Pay Component to a check.
     * @param {PayrollApiAddPayComponentToCheckRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public addPayComponentToCheck(requestParameters: PayrollApiAddPayComponentToCheckRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).addPayComponentToCheck(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a check to a worker for an unprocessed pay period.
     * @summary Worker Check
     * @param {PayrollApiAddWorkerCheckRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public addWorkerCheck(requestParameters: PayrollApiAddWorkerCheckRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).addWorkerCheck(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete checks by pay period Id and user Id.
     * @summary Checks by Pay Period and User
     * @param {PayrollApiDeleteChecksByPayPeriodAndUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public deleteChecksByPayPeriodAndUser(requestParameters: PayrollApiDeleteChecksByPayPeriodAndUserRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).deleteChecksByPayPeriodAndUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get check(s) that are for a specific company within a processed or unprocessed pay period.
     * @summary Company Checks
     * @param {PayrollApiGetCompanyChecksByPayPeriodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public getCompanyChecksByPayPeriod(requestParameters: PayrollApiGetCompanyChecksByPayPeriodRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).getCompanyChecksByPayPeriod(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pay component associated with the company.
     * @summary Company Pay Component
     * @param {PayrollApiGetCompanyPayComponentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public getCompanyPayComponent(requestParameters: PayrollApiGetCompanyPayComponentRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).getCompanyPayComponent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Array of pay components that are configured for a company. Pay components are earnings and deductions which are used for payroll.
     * @summary Company Pay Components
     * @param {PayrollApiGetCompanyPayComponentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public getCompanyPayComponents(requestParameters: PayrollApiGetCompanyPayComponentsRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).getCompanyPayComponents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Array of pay periods associated with the company.
     * @summary Company Pay Periods
     * @param {PayrollApiGetCompanyPayPeriodsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public getCompanyPayPeriods(requestParameters: PayrollApiGetCompanyPayPeriodsRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).getCompanyPayPeriods(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A single pay period.
     * @summary Company Pay Period
     * @param {PayrollApiGetPayPeriodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public getPayPeriod(requestParameters: PayrollApiGetPayPeriodRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).getPayPeriod(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific unprocessed or processed check that a worker has.
     * @summary Worker Check
     * @param {PayrollApiGetWorkerCheckRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public getWorkerCheck(requestParameters: PayrollApiGetWorkerCheckRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).getWorkerCheck(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get check(s) that are for a specific worker   within a processed or unprocessed pay period.
     * @summary Worker Checks
     * @param {PayrollApiGetWorkerChecksByPayPeriodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public getWorkerChecksByPayPeriod(requestParameters: PayrollApiGetWorkerChecksByPayPeriodRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).getWorkerChecksByPayPeriod(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a single pay component on an individual unprocessed check.
     * @summary Pay Component of a check
     * @param {PayrollApiRemovePayComponentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public removePayComponent(requestParameters: PayrollApiRemovePayComponentRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).removePayComponent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a specific unprocessed check that a worker has.
     * @summary Worker Check
     * @param {PayrollApiRemoveWorkerCheckRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public removeWorkerCheck(requestParameters: PayrollApiRemoveWorkerCheckRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).removeWorkerCheck(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Update a single pay component on an individual unprocessed check.
     * @summary Pay Component of a Check
     * @param {PayrollApiUpdatePayComponentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public updatePayComponent(requestParameters: PayrollApiUpdatePayComponentRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).updatePayComponent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
